[
    {
        "id": "ce14a002.31eb6",
        "type": "tab",
        "label": "Main tank"
    },
    {
        "id": "948b214b.6b74e",
        "type": "tab",
        "label": "Rain tank"
    },
    {
        "id": "2f93ead9.d06c16",
        "type": "tab",
        "label": "I/O",
        "disabled": false
    },
    {
        "id": "a28e7aaa.32de",
        "type": "tab",
        "label": "XBee In",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b883f942.771888",
        "type": "tab",
        "label": "Xbee OUT",
        "disabled": false,
        "info": ""
    },
    {
        "id": "414238f1.bebdc8",
        "type": "tab",
        "label": "Simulation"
    },
    {
        "id": "7f4ce2c1.80b31c",
        "type": "tab",
        "label": "Routing"
    },
    {
        "id": "d512f3f4.2aed1",
        "type": "tab",
        "label": "Weather"
    },
    {
        "id": "424211aa.fab598",
        "type": "tab",
        "label": "Sigma",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c96fed1a.5013d",
        "type": "tab",
        "label": "Flow 2"
    },
    {
        "id": "c2e924f0.3d16d8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "Helvetica Neue"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "3ff23924.c00dc6",
        "type": "ui_tab",
        "z": "",
        "name": "Summary",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "16b57cf4.e94a83",
        "type": "ui_group",
        "z": "",
        "name": "Main Tank",
        "tab": "3ff23924.c00dc6",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "c80996e.f37f668",
        "type": "ui_group",
        "z": "",
        "name": "Rain Tank",
        "tab": "3ff23924.c00dc6",
        "order": 2,
        "disp": true,
        "width": "6"
    },
    {
        "id": "65cd83bd.9a327c",
        "type": "ui_tab",
        "z": "",
        "name": "Settings",
        "icon": "settings",
        "order": 3
    },
    {
        "id": "3f2c84b1.c0d37c",
        "type": "ui_group",
        "z": "",
        "name": "System",
        "tab": "65cd83bd.9a327c",
        "order": 3,
        "disp": true,
        "width": "6"
    },
    {
        "id": "57c74e51.8108f8",
        "type": "ui_group",
        "z": "",
        "name": "Main Tank",
        "tab": "65cd83bd.9a327c",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "95c34752.a45b58",
        "type": "ui_group",
        "z": "",
        "name": "Rain Tank",
        "tab": "65cd83bd.9a327c",
        "order": 2,
        "disp": true,
        "width": "6"
    },
    {
        "id": "f2d280b9.0d2d8",
        "type": "ui_group",
        "z": "",
        "name": "The Week Ahead",
        "tab": "726a1f32.8d95e",
        "disp": true,
        "width": "6"
    },
    {
        "id": "726a1f32.8d95e",
        "type": "ui_tab",
        "z": "",
        "name": "Weather",
        "icon": "wb_sunny",
        "order": 2
    },
    {
        "id": "7b401d11.84bfe4",
        "type": "xbee-config",
        "z": "",
        "apiMode": "1",
        "rawFrames": false,
        "convertAdc": true,
        "vrefAdc": "1200",
        "serialPort": "/dev/ttyS0",
        "lock": false,
        "baudRate": "9600",
        "dataBits": "8",
        "stopBits": "1",
        "parity": "none",
        "bufferSize": "65536",
        "rtscts": false,
        "xon": false,
        "xoff": false,
        "xany": false,
        "vmin": "1",
        "vtime": "0"
    },
    {
        "id": "db8d1288.ec5c",
        "type": "ui_tab",
        "z": "",
        "name": "Sigma",
        "icon": "dashboard",
        "order": 4
    },
    {
        "id": "41d919af.074e08",
        "type": "ui_group",
        "z": "",
        "name": "nodes",
        "tab": "db8d1288.ec5c",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "e4400843.2147f8",
        "type": "ui_group",
        "z": "",
        "name": "Log Live2",
        "tab": "96b5ebb4.df3228",
        "order": 2,
        "disp": true,
        "width": "12"
    },
    {
        "id": "96b5ebb4.df3228",
        "type": "ui_tab",
        "z": "c96fed1a.5013d",
        "name": "Pi NR Log",
        "icon": "dashboard",
        "order": 4
    },
    {
        "id": "97bd4f7b.6842b",
        "type": "ui_gauge",
        "z": "ce14a002.31eb6",
        "name": "",
        "group": "16b57cf4.e94a83",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "wave",
        "title": "",
        "label": "%",
        "format": "{{value}}\"%\"",
        "min": 0,
        "max": "100",
        "colors": [
            "#00B500",
            "#E6E600",
            "#CA3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 401.5,
        "y": 45,
        "wires": []
    },
    {
        "id": "1d20266f.e2dfda",
        "type": "function",
        "z": "ce14a002.31eb6",
        "name": "Schmitt trigger",
        "func": "// Schmitt trigger turns on at hight% and turns off at low%\n\nconst onThreshold = 80;\nconst offThreshold = 70;\n\nvar myState = context.get('myState')||false;\n\nvar level = msg.payload;\n\nmsg.topic = \"isOn\";\n\nif ((level > onThreshold) && !myState) {\n    myState = msg.payload = true;\n}\nelse if ((level < offThreshold) && myState) {\n    myState = msg.payload = false;\n}\nelse {\n    msg = null;\n}\n\ncontext.set('myState',myState);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 440.5,
        "y": 127,
        "wires": [
            [
                "307f2ad4.cf80d6"
            ]
        ]
    },
    {
        "id": "307f2ad4.cf80d6",
        "type": "ui_switch",
        "z": "ce14a002.31eb6",
        "name": "",
        "label": "Dump to Rain tank",
        "group": "16b57cf4.e94a83",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "isOn",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 447.5,
        "y": 169,
        "wires": [
            [
                "effaec39.10051"
            ]
        ]
    },
    {
        "id": "57cbbac3.a83444",
        "type": "ui_switch",
        "z": "ce14a002.31eb6",
        "name": "",
        "label": "Low water ALARM!",
        "group": "16b57cf4.e94a83",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 188.5,
        "y": 230,
        "wires": [
            [
                "d862afd8.279d5",
                "af3a52af.50c5b"
            ]
        ]
    },
    {
        "id": "4951d9d9.b6ae28",
        "type": "function",
        "z": "ce14a002.31eb6",
        "name": "Schmitt trigger",
        "func": "// Schmitt trigger turns on at hight% and turns off at low%\n\nconst onThreshold = 55;\nconst offThreshold = 50;\n\nvar myState = context.get('myState')||false;\nvar level = msg.payload;\n\nmsg.topic = \"isOn\";\n\nif ((level > onThreshold) && !myState) {\n    myState = true;\n} else if ((level < offThreshold) && myState) {\n    myState = false;\n} else {\n    return null;\n}\n\ncontext.set('myState',myState);\n\n// invert the output cos it's a LOW level alert\nmsg.payload = !myState;\nmsg.data = level;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 177,
        "y": 189,
        "wires": [
            [
                "57cbbac3.a83444"
            ]
        ]
    },
    {
        "id": "5fd4d498.a02b2c",
        "type": "link in",
        "z": "ce14a002.31eb6",
        "name": "Main tank level",
        "links": [
            "aba6d704.545928"
        ],
        "x": 174.5,
        "y": 55,
        "wires": [
            [
                "4951d9d9.b6ae28",
                "1d20266f.e2dfda",
                "97bd4f7b.6842b"
            ]
        ]
    },
    {
        "id": "effaec39.10051",
        "type": "link out",
        "z": "ce14a002.31eb6",
        "name": "Rainwater dump switch",
        "links": [
            "77203f60.88dfc"
        ],
        "x": 502.5,
        "y": 245,
        "wires": []
    },
    {
        "id": "a1f727.ff5e08d8",
        "type": "ui_gauge",
        "z": "948b214b.6b74e",
        "name": "",
        "group": "c80996e.f37f668",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "wave",
        "title": "",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00B500",
            "#E6E600",
            "#CA3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 380,
        "y": 96,
        "wires": []
    },
    {
        "id": "28e68301.d7197c",
        "type": "inject",
        "z": "414238f1.bebdc8",
        "name": "Council water source",
        "topic": "",
        "payload": "4",
        "payloadType": "num",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "x": 141.5,
        "y": 77,
        "wires": [
            [
                "a086b55d.5f7948"
            ]
        ]
    },
    {
        "id": "7f1ee5f3.80e11c",
        "type": "inject",
        "z": "414238f1.bebdc8",
        "name": "Rainwater Diversion sink",
        "topic": "",
        "payload": "-10",
        "payloadType": "num",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "x": 151.5,
        "y": 131,
        "wires": [
            [
                "d3068670.2cf978"
            ]
        ]
    },
    {
        "id": "a086b55d.5f7948",
        "type": "function",
        "z": "414238f1.bebdc8",
        "name": "Main tank",
        "func": "var fill = context.get('fill')||0;\n\nfill = Math.max(Math.min(fill+msg.payload,100),0);\n\ncontext.set('fill',fill);\n\nmsg.payload = Math.round(fill);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 580,
        "y": 76,
        "wires": [
            [
                "d4ce9b5b.2b3168"
            ]
        ]
    },
    {
        "id": "d3068670.2cf978",
        "type": "function",
        "z": "414238f1.bebdc8",
        "name": "Valve - Dump to Raintank",
        "func": "// Simulates a tap.\n// send it isOn messages to set it state\n// send it a 'flow' and the flow appears on the \n// output of the tap along with it's compliment \n// which represents the taps inflow\nrc = null;\nvar isOn = context.get('isOn')||false;\n\nif (msg.topic == \"isOn\") {\n    isOn = (msg.payload)? true:false;\n    context.set('isOn',isOn);\n}\n    \nelse if (isOn){\n    var nmsg = {    topic: msg.topic,\n                    payload: -msg.payload };\n    rc = [msg,nmsg];\n}\n\nnode.status(\n    (isOn)? {fill:\"green\",shape:\"dot\",text:\"on\"}\n\t\t    :{fill:\"grey\",shape:\"dot\",text:\"off\"}\n);\n\nreturn rc;",
        "outputs": "2",
        "noerr": 0,
        "x": 399.5,
        "y": 223,
        "wires": [
            [
                "a086b55d.5f7948"
            ],
            [
                "82dc183e.7d23e8"
            ]
        ]
    },
    {
        "id": "77203f60.88dfc",
        "type": "link in",
        "z": "414238f1.bebdc8",
        "name": "Rainwater dump valve",
        "links": [
            "effaec39.10051"
        ],
        "x": 190.5,
        "y": 186,
        "wires": [
            [
                "d3068670.2cf978",
                "3dc5f297.c23a0e"
            ]
        ]
    },
    {
        "id": "d4ce9b5b.2b3168",
        "type": "link out",
        "z": "414238f1.bebdc8",
        "name": "Simulated Main level",
        "links": [
            "4c758c2e.b38a74"
        ],
        "x": 681.5,
        "y": 76,
        "wires": []
    },
    {
        "id": "d862afd8.279d5",
        "type": "function",
        "z": "ce14a002.31eb6",
        "name": "halt rain drain",
        "func": "if (msg.payload == true) {\n    msg.payload = false;\n    return msg;\n}else{\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 320,
        "wires": [
            [
                "307f2ad4.cf80d6"
            ]
        ]
    },
    {
        "id": "c0dc75b9.3f2388",
        "type": "comment",
        "z": "414238f1.bebdc8",
        "name": "Main tank flows",
        "info": "",
        "x": 93.5,
        "y": 27,
        "wires": []
    },
    {
        "id": "a65f3752.59a0c8",
        "type": "comment",
        "z": "414238f1.bebdc8",
        "name": "Rain tank flows",
        "info": "",
        "x": 112.5,
        "y": 329,
        "wires": []
    },
    {
        "id": "82dc183e.7d23e8",
        "type": "function",
        "z": "414238f1.bebdc8",
        "name": "Rain tank",
        "func": "var fill = context.get('fill')||0;\n\nfill = Math.max(Math.min(fill+msg.payload,100),0);\n\ncontext.set('fill',fill);\n\nmsg.payload = Math.round(fill);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 579,
        "y": 373,
        "wires": [
            [
                "4a951601.b56ae8"
            ]
        ]
    },
    {
        "id": "4a951601.b56ae8",
        "type": "link out",
        "z": "414238f1.bebdc8",
        "name": "Simulated Rain level",
        "links": [
            "5916e501.a6e91c"
        ],
        "x": 680.5,
        "y": 373,
        "wires": []
    },
    {
        "id": "4380552a.bc7fac",
        "type": "function",
        "z": "414238f1.bebdc8",
        "name": "Valve - Irrigate",
        "func": "// Simulates a tap.\n// send it isOn messages to set it state\n// send it a 'flow' and the flow appears on the \n// output of the tap along with it's compliment \n// which represents the taps inflow\nrc = null;\nvar isOn = context.get('isOn')||false;\n\nif (msg.topic == \"isOn\") {\n    isOn = (msg.payload)? true:false;\n    context.set('isOn',isOn);\n}\n    \nelse if (isOn){\n    var nmsg = {    topic: msg.topic,\n                    payload: -msg.payload };\n    rc = [msg,nmsg];\n}\n\nnode.status(\n    (isOn)? {fill:\"green\",shape:\"dot\",text:\"on\"}\n\t\t    :{fill:\"grey\",shape:\"dot\",text:\"off\"}\n);\n\nreturn rc;",
        "outputs": "2",
        "noerr": 0,
        "x": 367,
        "y": 448,
        "wires": [
            [
                "82dc183e.7d23e8"
            ],
            []
        ]
    },
    {
        "id": "68659376.979a6c",
        "type": "inject",
        "z": "414238f1.bebdc8",
        "name": "Irrigation Sink",
        "topic": "",
        "payload": "-6",
        "payloadType": "num",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "x": 132.5,
        "y": 448,
        "wires": [
            [
                "4380552a.bc7fac"
            ]
        ]
    },
    {
        "id": "621ac9f6.9de538",
        "type": "link in",
        "z": "948b214b.6b74e",
        "name": "Rain water level",
        "links": [
            "3b1751b2.c4e8ae"
        ],
        "x": 163.5,
        "y": 69,
        "wires": [
            [
                "a1f727.ff5e08d8",
                "d0a2afd9.2f5d5",
                "da81186f.257ee8"
            ]
        ]
    },
    {
        "id": "da81186f.257ee8",
        "type": "function",
        "z": "948b214b.6b74e",
        "name": "Hysterisis",
        "func": "// Schmitt trigger turns on at hight% and turns off at low%\n\nconst onThreshold = 80;\nconst offThreshold = 70;\n\nvar myState = context.get('myState')||false;\n\nvar level = msg.payload;\n\nmsg.topic = \"isOn\";\n\nif ((level > onThreshold) && !myState) {\n    myState = msg.payload = true;\n}\nelse if ((level < offThreshold) && myState) {\n    myState = msg.payload = false;\n}\nelse {\n    msg = null;\n}\n\ncontext.set('myState',myState);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 349.5,
        "y": 163,
        "wires": [
            [
                "9d42ede7.62bd1"
            ]
        ]
    },
    {
        "id": "9d42ede7.62bd1",
        "type": "ui_switch",
        "z": "948b214b.6b74e",
        "name": "",
        "label": "Irrigate",
        "group": "c80996e.f37f668",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "isOn",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 522.5,
        "y": 222,
        "wires": [
            [
                "de69ace1.21965"
            ]
        ]
    },
    {
        "id": "ffd9e8f.f002618",
        "type": "ui_switch",
        "z": "948b214b.6b74e",
        "name": "",
        "label": "Low water ALARM!",
        "group": "c80996e.f37f668",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 198.5,
        "y": 286,
        "wires": [
            [
                "d59e229c.2a61e",
                "b398a8ce.4c6758"
            ]
        ]
    },
    {
        "id": "d0a2afd9.2f5d5",
        "type": "function",
        "z": "948b214b.6b74e",
        "name": "Hysterisis",
        "func": "// Schmitt trigger turns on at hight% and turns off at low%\n\nconst onThreshold = 25;\nconst offThreshold = 20;\n\nvar myState = context.get('myState')||false;\n\nvar level = msg.payload;\n\nmsg.topic = \"isOn\";\n\nif ((level > onThreshold) && !myState) {\n    myState = true;\n} else if ((level < offThreshold) && myState) {\n    myState = false;\n} else {\n    return null;\n}\n\ncontext.set('myState',myState);\n\n// invert the output cos it's a LOW level alert\nmsg.payload = !myState;\nmsg.data = level;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 146,
        "y": 221,
        "wires": [
            [
                "ffd9e8f.f002618"
            ]
        ]
    },
    {
        "id": "d59e229c.2a61e",
        "type": "function",
        "z": "948b214b.6b74e",
        "name": "halt irrigation",
        "func": "if (msg.payload == true) {\n    msg.payload = false;\n    return msg;\n}else{\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 435.5,
        "y": 295,
        "wires": [
            [
                "9d42ede7.62bd1"
            ]
        ]
    },
    {
        "id": "6da70451.9258fc",
        "type": "link in",
        "z": "414238f1.bebdc8",
        "name": "Master irrigation valve",
        "links": [
            "de69ace1.21965"
        ],
        "x": 193.5,
        "y": 508,
        "wires": [
            [
                "4380552a.bc7fac",
                "8dff55a3.7200a8"
            ]
        ]
    },
    {
        "id": "de69ace1.21965",
        "type": "link out",
        "z": "948b214b.6b74e",
        "name": "Master Irrigation switch",
        "links": [
            "6da70451.9258fc"
        ],
        "x": 625.5,
        "y": 225,
        "wires": []
    },
    {
        "id": "e1e004a6.1e1ff8",
        "type": "function",
        "z": "414238f1.bebdc8",
        "name": "Rain",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 335.5,
        "y": 374,
        "wires": [
            [
                "82dc183e.7d23e8"
            ]
        ]
    },
    {
        "id": "43b7802e.bc488",
        "type": "link in",
        "z": "414238f1.bebdc8",
        "name": "Rain in",
        "links": [
            "11e4ba72.ee1b46",
            "1e3184d6.e1ce7b"
        ],
        "x": 141.5,
        "y": 376,
        "wires": [
            [
                "e1e004a6.1e1ff8"
            ]
        ]
    },
    {
        "id": "dfeaf7c9.201508",
        "type": "e-mail",
        "z": "2f93ead9.d06c16",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "name": "54eni77pmz@pomail.net",
        "dname": "Send to Pushover",
        "x": 580,
        "y": 98,
        "wires": []
    },
    {
        "id": "eaabe517.155418",
        "type": "link in",
        "z": "2f93ead9.d06c16",
        "name": "Send Notification",
        "links": [
            "61f02dcd.9e0fd4",
            "db55d4dd.24aa28"
        ],
        "x": 154.5,
        "y": 92,
        "wires": [
            [
                "da91907d.256e7",
                "5d2ac95c.a2d538"
            ]
        ]
    },
    {
        "id": "a15c55b9.5ea3a8",
        "type": "comment",
        "z": "2f93ead9.d06c16",
        "name": "Notifications",
        "info": "",
        "x": 102.5,
        "y": 40,
        "wires": []
    },
    {
        "id": "61f02dcd.9e0fd4",
        "type": "link out",
        "z": "948b214b.6b74e",
        "name": "Post alert msg",
        "links": [
            "eaabe517.155418"
        ],
        "x": 587.5,
        "y": 373,
        "wires": []
    },
    {
        "id": "af3a52af.50c5b",
        "type": "function",
        "z": "ce14a002.31eb6",
        "name": "Alert Msg",
        "func": "if (msg.payload === true) {\n    \n    // topic will go into the subject line of an email alert\n    msg.topic = \"Low water alert\";\n    // payload will go into the body\n    msg.payload = \"The Main tank is running low (\" + msg.data +'%)';\n\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 232,
        "y": 396,
        "wires": [
            [
                "db55d4dd.24aa28"
            ]
        ]
    },
    {
        "id": "db55d4dd.24aa28",
        "type": "link out",
        "z": "ce14a002.31eb6",
        "name": "Send an Alert",
        "links": [
            "eaabe517.155418"
        ],
        "x": 374.5,
        "y": 442,
        "wires": []
    },
    {
        "id": "9378ea14.6c8718",
        "type": "link out",
        "z": "ce14a002.31eb6",
        "name": "Main % fill",
        "links": [
            "70f37b21.8f0c84"
        ],
        "x": 545,
        "y": 596,
        "wires": []
    },
    {
        "id": "235e11c7.dca1ee",
        "type": "function",
        "z": "ce14a002.31eb6",
        "name": "ADC to cm",
        "func": "//calibration of sensor\nvar k = 0.41;\nvar sample = msg.payload;\n\nmsg.payload = Math.round(k * sample);\n//msg.topic = 'cm'\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 365.5,
        "y": 549,
        "wires": [
            [
                "6e6eb374.91914c",
                "6c7faa15.89dd8c"
            ]
        ]
    },
    {
        "id": "6e6eb374.91914c",
        "type": "function",
        "z": "ce14a002.31eb6",
        "name": "cm to %full",
        "func": "// cm tanks levels\nvar empty = context.get('emptyLevel')||300;\nvar full = context.get('fullLevel')||50;\nvar cur = msg.payload;\n\nempty = Math.max(cur,empty);\nfull = Math.min(cur,full);\n\ncontext.set('emptyLevel',empty);\ncontext.set('fullLevel',full);\n\nmsg.payload = \n    Math.round(100 * ((empty - cur) / (empty - full)));\nmsg.topic = 'fill';\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 365.5,
        "y": 595,
        "wires": [
            [
                "9378ea14.6c8718"
            ]
        ]
    },
    {
        "id": "7e8ab1f8.81755",
        "type": "link in",
        "z": "ce14a002.31eb6",
        "name": "Main ADC in",
        "links": [
            "f26a1de2.0d95e",
            "c9736846.2fc8e8"
        ],
        "x": 141,
        "y": 548,
        "wires": [
            [
                "235e11c7.dca1ee"
            ]
        ]
    },
    {
        "id": "fb99740c.046688",
        "type": "link out",
        "z": "948b214b.6b74e",
        "name": "Rain % fill",
        "links": [
            "a0f35b9b.5f0ca8"
        ],
        "x": 510,
        "y": 594,
        "wires": []
    },
    {
        "id": "b9476527.46b898",
        "type": "function",
        "z": "948b214b.6b74e",
        "name": "ADC to cm",
        "func": "//calibration of sensor\nvar k = 0.41;\nvar sample = msg.payload;\n\nmsg.payload = Math.round(k * sample);\n//msg.topic = 'cm'\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 353.5,
        "y": 548,
        "wires": [
            [
                "63a987fc.9c5678",
                "6499eea6.4189f8"
            ]
        ]
    },
    {
        "id": "63a987fc.9c5678",
        "type": "function",
        "z": "948b214b.6b74e",
        "name": "cm to %full",
        "func": "// cm tanks levels\nvar empty = context.get('emptyLevel')||300;\nvar full = context.get('fullLevel')||50;\nvar cur = msg.payload;\n\nempty = Math.max(cur,empty);\nfull = Math.min(cur,full);\n\ncontext.set('emptyLevel',empty);\ncontext.set('fullLevel',full);\n\nmsg.payload = \n    Math.round(100 * ((empty - cur) / (empty - full)));\nmsg.topic = 'fill';\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 353.5,
        "y": 594,
        "wires": [
            [
                "fb99740c.046688"
            ]
        ]
    },
    {
        "id": "ea27ba5a.15d848",
        "type": "link in",
        "z": "948b214b.6b74e",
        "name": "Rain ADC in",
        "links": [
            "2cb39bc9.d34c64",
            "cecf344d.f3d68"
        ],
        "x": 181,
        "y": 545,
        "wires": [
            [
                "b9476527.46b898"
            ]
        ]
    },
    {
        "id": "da91907d.256e7",
        "type": "debug",
        "z": "2f93ead9.d06c16",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 309.5,
        "y": 51,
        "wires": []
    },
    {
        "id": "de8dbd5e.21724",
        "type": "function",
        "z": "7f4ce2c1.80b31c",
        "name": "Valve",
        "func": "// Simulates a tap.\n// send it isOn messages to set it state\n// send it a 'flow' and the flow appears on the \n// output of the tap along with it's compliment \n// which represents the taps inflow\nrc = null;\nvar isOn = context.get('isOn')||false;\n\nif (msg.topic == \"isOn\") {\n    switch (msg.payload) {\n        case true:\n        case 1:\n            isOn = true;\n            break;\n        default:\n            isOn = false;\n    }\n    context.set('isOn',isOn);\n}\n    \nelse if (isOn){\n    var nmsg = {    topic: msg.topic,\n                    payload: -msg.payload };\n    rc = [msg,nmsg];\n}\n\nnode.status(\n    (isOn)? {fill:\"green\",shape:\"dot\",text:\"on\"}\n\t\t    :{fill:\"grey\",shape:\"dot\",text:\"off\"}\n);\n\nreturn rc;",
        "outputs": "2",
        "noerr": 0,
        "x": 332.5,
        "y": 87,
        "wires": [
            [
                "aba6d704.545928"
            ],
            []
        ]
    },
    {
        "id": "aba6d704.545928",
        "type": "link out",
        "z": "7f4ce2c1.80b31c",
        "name": "switched main level",
        "links": [
            "d604f102.29fb1",
            "5fd4d498.a02b2c"
        ],
        "x": 579.5,
        "y": 162,
        "wires": []
    },
    {
        "id": "70f37b21.8f0c84",
        "type": "link in",
        "z": "7f4ce2c1.80b31c",
        "name": "Real Main level",
        "links": [
            "9378ea14.6c8718"
        ],
        "x": 172.5,
        "y": 86,
        "wires": [
            [
                "de8dbd5e.21724"
            ]
        ]
    },
    {
        "id": "8603bb8f.79fc48",
        "type": "function",
        "z": "7f4ce2c1.80b31c",
        "name": "Valve",
        "func": "// Simulates a tap.\n// send it isOn messages to set it state\n// send it a 'flow' and the flow appears on the \n// output of the tap along with it's compliment \n// which represents the taps inflow\nrc = null;\nvar isOn = context.get('isOn')||false;\n\nif (msg.topic == \"isOn\") {\n    switch (msg.payload) {\n        case true:\n        case 3:\n            isOn = true;\n            break;\n        default:\n            isOn = false;\n    }\n    context.set('isOn',isOn);\n}\n    \nelse if (isOn){\n    var nmsg = {    topic: msg.topic,\n                    payload: -msg.payload };\n    rc = [msg,nmsg];\n}\n\nnode.status(\n    (isOn)? {fill:\"green\",shape:\"dot\",text:\"on\"}\n\t\t    :{fill:\"grey\",shape:\"dot\",text:\"off\"}\n);\n\nreturn rc;",
        "outputs": "2",
        "noerr": 0,
        "x": 333.5,
        "y": 238,
        "wires": [
            [
                "aba6d704.545928"
            ],
            []
        ]
    },
    {
        "id": "4c758c2e.b38a74",
        "type": "link in",
        "z": "7f4ce2c1.80b31c",
        "name": "Simulated Main level",
        "links": [
            "d4ce9b5b.2b3168"
        ],
        "x": 178.5,
        "y": 238,
        "wires": [
            [
                "8603bb8f.79fc48"
            ]
        ]
    },
    {
        "id": "1ee4445a.e11bbc",
        "type": "debug",
        "z": "7f4ce2c1.80b31c",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 591.5,
        "y": 339,
        "wires": []
    },
    {
        "id": "d604f102.29fb1",
        "type": "link in",
        "z": "7f4ce2c1.80b31c",
        "name": "",
        "links": [
            "aba6d704.545928"
        ],
        "x": 483.5,
        "y": 275,
        "wires": [
            [
                "1ee4445a.e11bbc"
            ]
        ]
    },
    {
        "id": "ad4eee79.52b11",
        "type": "function",
        "z": "414238f1.bebdc8",
        "name": "Sine generator",
        "func": "var angle = context.get('angle')||0;\n\nmsg.payload = (1 + Math.sin(angle))/2;\n\nangle += 10 * Math.PI / 180;\n\ncontext.set('angle',angle);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 341.5,
        "y": 648,
        "wires": [
            [
                "9f5fd750.60a028",
                "1e3184d6.e1ce7b"
            ]
        ]
    },
    {
        "id": "325c2921.cda3d6",
        "type": "inject",
        "z": "414238f1.bebdc8",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "x": 144.5,
        "y": 648,
        "wires": [
            [
                "ad4eee79.52b11"
            ]
        ]
    },
    {
        "id": "9f5fd750.60a028",
        "type": "function",
        "z": "414238f1.bebdc8",
        "name": "sine to ADC",
        "func": "msg.payload = Math.round(1024 * msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 332.5,
        "y": 695,
        "wires": [
            [
                "a5953aee.5a6ac8"
            ]
        ]
    },
    {
        "id": "ecef1ba3.1310e8",
        "type": "comment",
        "z": "414238f1.bebdc8",
        "name": "Sinewave",
        "info": "",
        "x": 91,
        "y": 596,
        "wires": []
    },
    {
        "id": "1e3184d6.e1ce7b",
        "type": "link out",
        "z": "414238f1.bebdc8",
        "name": "sine function",
        "links": [
            "43b7802e.bc488"
        ],
        "x": 551,
        "y": 645,
        "wires": []
    },
    {
        "id": "a5953aee.5a6ac8",
        "type": "link out",
        "z": "414238f1.bebdc8",
        "name": "Sinusoidal ADC",
        "links": [],
        "x": 553,
        "y": 694,
        "wires": []
    },
    {
        "id": "2bc11dd0.d43ee2",
        "type": "ui_switch",
        "z": "2f93ead9.d06c16",
        "name": "",
        "label": "notifications",
        "group": "3f2c84b1.c0d37c",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "isOn",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 283.5,
        "y": 225,
        "wires": [
            [
                "5d2ac95c.a2d538"
            ]
        ]
    },
    {
        "id": "5d2ac95c.a2d538",
        "type": "function",
        "z": "2f93ead9.d06c16",
        "name": "Valve",
        "func": "// Simulates a tap.\n// send it isOn messages to set it state\n// send it a 'flow' and the flow appears on the \n// output of the tap along with it's compliment \n// which represents the taps inflow\nrc = null;\nvar isOn = context.get('isOn')||false;\n\nif (msg.topic == \"isOn\") {\n    isOn = (msg.payload)? true:false;\n    context.set('isOn',isOn);\n}\n    \nelse if (isOn){\n    var nmsg = {    topic: msg.topic,\n                    payload: -msg.payload };\n    rc = [msg,nmsg];\n}\n\nnode.status(\n    (isOn)? {fill:\"green\",shape:\"dot\",text:\"on\"}\n\t\t    :{fill:\"grey\",shape:\"dot\",text:\"off\"}\n);\n\nreturn rc;",
        "outputs": "2",
        "noerr": 0,
        "x": 415.5,
        "y": 141,
        "wires": [
            [
                "dfeaf7c9.201508"
            ],
            []
        ]
    },
    {
        "id": "ba9fcfbc.45603",
        "type": "inject",
        "z": "2f93ead9.d06c16",
        "name": "init",
        "topic": "isOn",
        "payload": "false",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 102,
        "y": 161,
        "wires": [
            [
                "2bc11dd0.d43ee2",
                "5d2ac95c.a2d538"
            ]
        ]
    },
    {
        "id": "1467c9d.feb9836",
        "type": "ui_dropdown",
        "z": "7f4ce2c1.80b31c",
        "name": "",
        "label": "Source",
        "group": "57c74e51.8108f8",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": true,
        "options": [
            {
                "label": "Measured",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Manual",
                "value": 2,
                "type": "num"
            },
            {
                "label": "Simulation",
                "value": 3,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "isOn",
        "x": 316.5,
        "y": 342,
        "wires": [
            [
                "de8dbd5e.21724",
                "d543dcc8.2abc2",
                "8603bb8f.79fc48"
            ]
        ]
    },
    {
        "id": "a8c2763c.573d88",
        "type": "inject",
        "z": "7f4ce2c1.80b31c",
        "name": "init",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 110,
        "y": 367,
        "wires": [
            [
                "1467c9d.feb9836",
                "c5500b90.3aaff8"
            ]
        ]
    },
    {
        "id": "883eadd4.77c15",
        "type": "ui_slider",
        "z": "7f4ce2c1.80b31c",
        "name": "",
        "label": "Level",
        "group": "57c74e51.8108f8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "topic": "",
        "min": 0,
        "max": "100",
        "step": 1,
        "x": 101,
        "y": 168,
        "wires": [
            [
                "d543dcc8.2abc2"
            ]
        ]
    },
    {
        "id": "d543dcc8.2abc2",
        "type": "function",
        "z": "7f4ce2c1.80b31c",
        "name": "Valve",
        "func": "// Simulates a tap.\n// send it isOn messages to set it state\n// send it a 'flow' and the flow appears on the \n// output of the tap along with it's compliment \n// which represents the taps inflow\nrc = null;\nvar isOn = context.get('isOn')||false;\n\nif (msg.topic == \"isOn\") {\n    switch (msg.payload) {\n        case true:\n        case 2:\n            isOn = true;\n            break;\n        default:\n            isOn = false;\n    }\n    context.set('isOn',isOn);\n}\n    \nelse if (isOn){\n    var nmsg = {    topic: msg.topic,\n                    payload: -msg.payload };\n    rc = [msg,nmsg];\n}\n\nnode.status(\n    (isOn)? {fill:\"green\",shape:\"dot\",text:\"on\"}\n\t\t    :{fill:\"grey\",shape:\"dot\",text:\"off\"}\n);\n\nreturn rc;",
        "outputs": "2",
        "noerr": 0,
        "x": 316.5,
        "y": 169,
        "wires": [
            [
                "aba6d704.545928"
            ],
            []
        ]
    },
    {
        "id": "b398a8ce.4c6758",
        "type": "function",
        "z": "948b214b.6b74e",
        "name": "Alert Msg",
        "func": "if (msg.payload === true) {\n    \n    // topic will go into the subject line of an email alert\n    msg.topic = \"Low water alert\";\n    // payload will go into the body\n    msg.payload = \"The Main tank is running low (\" + msg.data +'%)';\n\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 426,
        "y": 366,
        "wires": [
            [
                "61f02dcd.9e0fd4"
            ]
        ]
    },
    {
        "id": "82e026ed.7d1fd8",
        "type": "function",
        "z": "7f4ce2c1.80b31c",
        "name": "Valve",
        "func": "// Simulates a tap.\n// send it isOn messages to set it state\n// send it a 'flow' and the flow appears on the \n// output of the tap along with it's compliment \n// which represents the taps inflow\nrc = null;\nvar isOn = context.get('isOn')||false;\n\nif (msg.topic == \"isOn\") {\n    switch (msg.payload) {\n        case true:\n        case 1:\n            isOn = true;\n            break;\n        default:\n            isOn = false;\n    }\n    context.set('isOn',isOn);\n}\n    \nelse if (isOn){\n    var nmsg = {    topic: msg.topic,\n                    payload: -msg.payload };\n    rc = [msg,nmsg];\n}\n\nnode.status(\n    (isOn)? {fill:\"green\",shape:\"dot\",text:\"on\"}\n\t\t    :{fill:\"grey\",shape:\"dot\",text:\"off\"}\n);\n\nreturn rc;",
        "outputs": "2",
        "noerr": 0,
        "x": 327.5,
        "y": 505,
        "wires": [
            [
                "3b1751b2.c4e8ae"
            ],
            []
        ]
    },
    {
        "id": "3b1751b2.c4e8ae",
        "type": "link out",
        "z": "7f4ce2c1.80b31c",
        "name": "switched rain level",
        "links": [
            "621ac9f6.9de538",
            "e680cf96.197f3"
        ],
        "x": 574.5,
        "y": 580,
        "wires": []
    },
    {
        "id": "a0f35b9b.5f0ca8",
        "type": "link in",
        "z": "7f4ce2c1.80b31c",
        "name": "Rain % fill",
        "links": [
            "fb99740c.046688"
        ],
        "x": 167.5,
        "y": 504,
        "wires": [
            [
                "82e026ed.7d1fd8"
            ]
        ]
    },
    {
        "id": "4bd01d12.b42fe4",
        "type": "function",
        "z": "7f4ce2c1.80b31c",
        "name": "Valve",
        "func": "// Simulates a tap.\n// send it isOn messages to set it state\n// send it a 'flow' and the flow appears on the \n// output of the tap along with it's compliment \n// which represents the taps inflow\nrc = null;\nvar isOn = context.get('isOn')||false;\n\nif (msg.topic == \"isOn\") {\n    switch (msg.payload) {\n        case true:\n        case 3:\n            isOn = true;\n            break;\n        default:\n            isOn = false;\n    }\n    context.set('isOn',isOn);\n}\n    \nelse if (isOn){\n    var nmsg = {    topic: msg.topic,\n                    payload: -msg.payload };\n    rc = [msg,nmsg];\n}\n\nnode.status(\n    (isOn)? {fill:\"green\",shape:\"dot\",text:\"on\"}\n\t\t    :{fill:\"grey\",shape:\"dot\",text:\"off\"}\n);\n\nreturn rc;",
        "outputs": "2",
        "noerr": 0,
        "x": 328.5,
        "y": 656,
        "wires": [
            [
                "3b1751b2.c4e8ae"
            ],
            []
        ]
    },
    {
        "id": "5916e501.a6e91c",
        "type": "link in",
        "z": "7f4ce2c1.80b31c",
        "name": "Simulated Main level",
        "links": [
            "4a951601.b56ae8"
        ],
        "x": 173.5,
        "y": 656,
        "wires": [
            [
                "4bd01d12.b42fe4"
            ]
        ]
    },
    {
        "id": "7a1cd748.85e328",
        "type": "debug",
        "z": "7f4ce2c1.80b31c",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 586.5,
        "y": 757,
        "wires": []
    },
    {
        "id": "e680cf96.197f3",
        "type": "link in",
        "z": "7f4ce2c1.80b31c",
        "name": "",
        "links": [
            "3b1751b2.c4e8ae"
        ],
        "x": 478.5,
        "y": 693,
        "wires": [
            [
                "7a1cd748.85e328"
            ]
        ]
    },
    {
        "id": "c5500b90.3aaff8",
        "type": "ui_dropdown",
        "z": "7f4ce2c1.80b31c",
        "name": "",
        "label": "Source",
        "group": "95c34752.a45b58",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": true,
        "options": [
            {
                "label": "Measured",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Manual",
                "value": 2,
                "type": "num"
            },
            {
                "label": "Simulation",
                "value": 3,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "isOn",
        "x": 315.5,
        "y": 399,
        "wires": [
            [
                "82e026ed.7d1fd8",
                "e6608b4c.199f78",
                "4bd01d12.b42fe4"
            ]
        ]
    },
    {
        "id": "7793ed29.886c14",
        "type": "ui_slider",
        "z": "7f4ce2c1.80b31c",
        "name": "",
        "label": "Level",
        "group": "95c34752.a45b58",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "topic": "",
        "min": 0,
        "max": "100",
        "step": 1,
        "x": 96,
        "y": 586,
        "wires": [
            [
                "e6608b4c.199f78"
            ]
        ]
    },
    {
        "id": "e6608b4c.199f78",
        "type": "function",
        "z": "7f4ce2c1.80b31c",
        "name": "Valve",
        "func": "// Simulates a tap.\n// send it isOn messages to set it state\n// send it a 'flow' and the flow appears on the \n// output of the tap along with it's compliment \n// which represents the taps inflow\nrc = null;\nvar isOn = context.get('isOn')||false;\n\nif (msg.topic == \"isOn\") {\n    switch (msg.payload) {\n        case true:\n        case 2:\n            isOn = true;\n            break;\n        default:\n            isOn = false;\n    }\n    context.set('isOn',isOn);\n}\n    \nelse if (isOn){\n    var nmsg = {    topic: msg.topic,\n                    payload: -msg.payload };\n    rc = [msg,nmsg];\n}\n\nnode.status(\n    (isOn)? {fill:\"green\",shape:\"dot\",text:\"on\"}\n\t\t    :{fill:\"grey\",shape:\"dot\",text:\"off\"}\n);\n\nreturn rc;",
        "outputs": "2",
        "noerr": 0,
        "x": 311.5,
        "y": 587,
        "wires": [
            [
                "3b1751b2.c4e8ae"
            ],
            []
        ]
    },
    {
        "id": "983fb20e.67c05",
        "type": "exec",
        "z": "2f93ead9.d06c16",
        "command": "~/.node-red/myIp.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "ip?",
        "x": 290,
        "y": 380,
        "wires": [
            [
                "a2d6d2e2.5d293",
                "4e320872.b1cdf8"
            ],
            [],
            []
        ]
    },
    {
        "id": "26363a25.d9c9c6",
        "type": "inject",
        "z": "2f93ead9.d06c16",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 118,
        "y": 370.5,
        "wires": [
            [
                "983fb20e.67c05",
                "69434942.96bcb8"
            ]
        ]
    },
    {
        "id": "a2d6d2e2.5d293",
        "type": "ui_text",
        "z": "2f93ead9.d06c16",
        "group": "3f2c84b1.c0d37c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "My IP:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 448,
        "y": 372.5,
        "wires": []
    },
    {
        "id": "19a53bcb.e65ac4",
        "type": "function",
        "z": "d512f3f4.2aed1",
        "name": "Day 0 icon",
        "func": "try {\nmsg.payload=msg.payload.currently.icon;\nnode.send(msg);\n}\ncatch(e) {}",
        "outputs": 1,
        "noerr": 0,
        "x": 551,
        "y": 337,
        "wires": [
            [
                "9d73d2d3.628c3"
            ]
        ]
    },
    {
        "id": "e23aebd8.1dc518",
        "type": "ui_template",
        "z": "d512f3f4.2aed1",
        "group": "f2d280b9.0d2d8",
        "name": "CSS",
        "order": 9,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .filled {\n        height: 100% !important;\n        padding: 0 !important;\n        margin: 0 !important;\n    }\n    .nr-dashboard-template {\n        padding: 0;\n        margin: 0;\n    }\n    .rounded {\n        border-radius: 12px 12px 12px 12px;\n    }\n    .bigfont {\n        font-size: 18px;\n    }\n    .smallfont {\n        font-size: 12px;\n    }\n    .hi {\n        color: \"red\";\n    }\n    .lo {\n        color: \"blue\";\n    }\n</style>\n \n<script>\n    $('.vibrate').on('click', function() {\n        navigator.vibrate(100);\n    });\n\n    function restore_bg(x) {\n        $(this).css(\"background-color\", x);\n    };\n\n    $('.touched').on('mousedown', function() {\n        var x = $(this).css(\"background-color\");\n        $(this).css(\"background-color\", \"yellow\");\n\n        setTimeout(restore_bg.bind(this, x), 200);\n        navigator.vibrate(80);\n    });\n\n </script>\n\n \n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 751,
        "y": 277,
        "wires": [
            []
        ]
    },
    {
        "id": "7483a045.8b7c6",
        "type": "function",
        "z": "d512f3f4.2aed1",
        "name": "Day 1 icon",
        "func": "try {\nmsg.payload=msg.payload.daily.data[1].icon;\nnode.send(msg);\n}\ncatch(e) {}",
        "outputs": 1,
        "noerr": 0,
        "x": 551,
        "y": 377,
        "wires": [
            [
                "6d75ce96.928a3"
            ]
        ]
    },
    {
        "id": "9d73d2d3.628c3",
        "type": "ui_template",
        "z": "d512f3f4.2aed1",
        "group": "f2d280b9.0d2d8",
        "name": "Day 0",
        "order": 3,
        "width": "1",
        "height": "1",
        "format": "<script src=\"/myjs/skycons.js\"></script>\n\n<canvas id=\"icon0\" width=\"48\" height=\"48\"></canvas>\n\n<script>\n   var options = {\"monochrome\": false \n        // ,\"colors\": { \n        //       \"main\": \"#779966\", \n        //       \"moon\":\"#666666\",\n        //       \"fog\": \"#555522\",\n        //       \"fogbank\": \"#884488\",\n        //       \"cloud\": \"#999999\",\n        //       \"snow\": \"#aaaaaa\",\n        //       \"leaf\":\"#00ff00\",\n        //       \"rain\": \"#00ffff\",\n        //       \"sun\": \"#ff3300\"\n        //    }\n        };\n        \n    function setIcon(scope,icon) {\n        scope.$watch('msg.payload', function(data) {\n           if (data==\"clear-day\") skycons.set(icon, Skycons.CLEAR_DAY);\n           if (data==\"clear-night\") skycons.set(icon, Skycons.CLEAR_NIGHT);\n           if (data==\"partly-cloudy-day\") skycons.set(icon, Skycons.PARTLY_CLOUDY_DAY);\n           if (data==\"partly-cloudy-night\") skycons.set(icon, Skycons.PARTLY_CLOUDY_NIGHT);\n           if (data==\"cloudy\") skycons.set(icon, Skycons.CLOUDY);\n           if (data==\"rain\") skycons.set(icon, Skycons.RAIN);\n           if (data==\"sleet\") skycons.set(icon, Skycons.SLEET);\n           if (data==\"snow\") skycons.set(icon, Skycons.SNOW);\n           if (data==\"wind\") skycons.set(icon, Skycons.WIND);\n           if (data==\"fog\") skycons.set(icon, Skycons.FOG);\n        });\n    };\n \n        \n    var skycons = new Skycons(options); \n    skycons.play();\n \n    var id = \"icon0\";\n    \n    setIcon(scope,id);\n    \n    // (function(scope) {\n    //     scope.$watch('msg.payload', function(data) {\n    //         if (data==\"clear-day\") skycons.set(icon, Skycons.CLEAR_DAY);\n    //         if (data==\"clear-night\") skycons.set(icon, Skycons.CLEAR_NIGHT);\n    //         if (data==\"partly-cloudy-day\") skycons.set(icon, Skycons.PARTLY_CLOUDY_DAY);\n    //         if (data==\"partly-cloudy-night\") skycons.set(icon, Skycons.PARTLY_CLOUDY_NIGHT);\n    //         if (data==\"cloudy\") skycons.set(icon, Skycons.CLOUDY);\n    //         if (data==\"rain\") skycons.set(icon, Skycons.RAIN);\n    //         if (data==\"sleet\") skycons.set(icon, Skycons.SLEET);\n    //         if (data==\"snow\") skycons.set(icon, Skycons.SNOW);\n    //         if (data==\"wind\") skycons.set(icon, Skycons.WIND);\n    //         if (data==\"fog\") skycons.set(icon, Skycons.FOG);\n    //     });\n    // })(scope);\n\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 751,
        "y": 337,
        "wires": [
            []
        ]
    },
    {
        "id": "6d75ce96.928a3",
        "type": "ui_template",
        "z": "d512f3f4.2aed1",
        "group": "f2d280b9.0d2d8",
        "name": "Day 1",
        "order": 4,
        "width": "1",
        "height": "1",
        "format": "<canvas id=\"icon1\"  width=\"48\" height=\"48\"></canvas>\n \n<script>\n    setIcon(scope,\"icon1\");\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 751,
        "y": 377,
        "wires": [
            []
        ]
    },
    {
        "id": "d6ae6d2e.29519",
        "type": "ui_template",
        "z": "d512f3f4.2aed1",
        "group": "f2d280b9.0d2d8",
        "name": "Day 2",
        "order": 5,
        "width": "1",
        "height": "1",
        "format": "<canvas id=\"icon2\"  width=\"48\" height=\"48\"></canvas>\n \n<script>\n    setIcon(scope,\"icon2\");\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "x": 751,
        "y": 417,
        "wires": [
            []
        ]
    },
    {
        "id": "4bf54395.b40abc",
        "type": "ui_template",
        "z": "d512f3f4.2aed1",
        "group": "f2d280b9.0d2d8",
        "name": "Day 3",
        "order": 6,
        "width": "1",
        "height": "1",
        "format": "<canvas id=\"icon3\"  width=\"48\" height=\"48\"></canvas>\n \n<script>\n    setIcon(scope,\"icon3\");\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "x": 751,
        "y": 457,
        "wires": [
            []
        ]
    },
    {
        "id": "6e50fc71.91af04",
        "type": "ui_template",
        "z": "d512f3f4.2aed1",
        "group": "f2d280b9.0d2d8",
        "name": "Day 4",
        "order": 7,
        "width": "1",
        "height": "1",
        "format": "<canvas id=\"icon4\"  width=\"48\" height=\"48\"></canvas>\n \n<script>\n    setIcon(scope,\"icon4\");\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "x": 751,
        "y": 497,
        "wires": [
            []
        ]
    },
    {
        "id": "957e1b3d.6a81e8",
        "type": "ui_template",
        "z": "d512f3f4.2aed1",
        "group": "f2d280b9.0d2d8",
        "name": "Day 5",
        "order": 8,
        "width": "1",
        "height": "1",
        "format": "<canvas id=\"icon5\"  width=\"48\" height=\"48\"></canvas>\n \n<script>\n    setIcon(scope,\"icon5\");\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "x": 751,
        "y": 537,
        "wires": [
            []
        ]
    },
    {
        "id": "49c85da8.b637a4",
        "type": "function",
        "z": "d512f3f4.2aed1",
        "name": "Day 2 icon",
        "func": "try {\nmsg.payload=msg.payload.daily.data[2].icon;\nnode.send(msg);\n}\ncatch(e) {}",
        "outputs": 1,
        "noerr": 0,
        "x": 551,
        "y": 417,
        "wires": [
            [
                "d6ae6d2e.29519"
            ]
        ]
    },
    {
        "id": "d5fb6f9a.2a049",
        "type": "function",
        "z": "d512f3f4.2aed1",
        "name": "Day 3 icon",
        "func": "try {\nmsg.payload=msg.payload.daily.data[3].icon;\nnode.send(msg);\n}\ncatch(e) {}",
        "outputs": 1,
        "noerr": 0,
        "x": 551,
        "y": 457,
        "wires": [
            [
                "4bf54395.b40abc"
            ]
        ]
    },
    {
        "id": "bde96b67.421698",
        "type": "function",
        "z": "d512f3f4.2aed1",
        "name": "Day 4 icon",
        "func": "try {\nmsg.payload=msg.payload.daily.data[4].icon;\nnode.send(msg);\n}\ncatch(e) {}",
        "outputs": 1,
        "noerr": 0,
        "x": 551,
        "y": 497,
        "wires": [
            [
                "6e50fc71.91af04"
            ]
        ]
    },
    {
        "id": "779fbebc.88604",
        "type": "function",
        "z": "d512f3f4.2aed1",
        "name": "Day 5 icon",
        "func": "try {\nmsg.payload=msg.payload.daily.data[5].icon;\nnode.send(msg);\n}\ncatch(e) {}",
        "outputs": 1,
        "noerr": 0,
        "x": 551,
        "y": 537,
        "wires": [
            [
                "957e1b3d.6a81e8"
            ]
        ]
    },
    {
        "id": "4294372e.bd6bc8",
        "type": "function",
        "z": "d512f3f4.2aed1",
        "name": "Days",
        "func": "(function() {\n    var days = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];\n\n    var months = ['January','February','March','April','May','June','July','August','September','October','November','December'];\n\n    Date.prototype.getMonthName = function() {\n        return months[ this.getMonth() ];\n    };\n    Date.prototype.getDayName = function() {\n        return days[ this.getDay() ];\n    };\n    \n    Date.prototype.addDays = function(days) {\n        this.setDate(this.getDate() + parseInt(days));\n        return this;\n    };\n})();\n\nmsg = {};\nvar now = new Date();\nmsg.d0 = now.getDayName();\nmsg.d1 = new Date().addDays(1).getDayName(); //+1 days\nmsg.d2 = new Date().addDays(2).getDayName(); //+2 days\nmsg.d3 = new Date().addDays(3).getDayName(); //+3 days\nmsg.d4 = new Date().addDays(4).getDayName(); //+4 days\nmsg.d5 = new Date().addDays(5).getDayName(); //+5 days\n\nmsg.payload=msg.d0;\nvar month = now.getMonthName();\n        node.status({text:msg.payload});\n        \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 571,
        "y": 157,
        "wires": [
            [
                "fd9a3951.0265c8"
            ]
        ]
    },
    {
        "id": "fd9a3951.0265c8",
        "type": "ui_template",
        "z": "d512f3f4.2aed1",
        "group": "f2d280b9.0d2d8",
        "name": "Days",
        "order": 1,
        "width": "6",
        "height": "1",
        "format": "<div layout=\"row\" layout-align=\"space-between\" style=\"text-align: left; margin:8px 0 0 8px;\">\n<span style=\"width:16%;margin-left:4px;\">{{msg.d0}}</span>\n<span style=\"width:16%;margin-left:4px;\">{{msg.d1}}</span>\n<span style=\"width:16%;margin-left:4px;\">{{msg.d2}}</span>\n<span style=\"width:16%;margin-left:4px;\">{{msg.d3}}</span>\n<span style=\"width:16%;margin-left:4px;\">{{msg.d4}}</span>\n<span style=\"width:16%;margin-left:4px;\">{{msg.d5}}</span>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 751,
        "y": 157,
        "wires": [
            []
        ]
    },
    {
        "id": "fd582da8.02a7d",
        "type": "function",
        "z": "d512f3f4.2aed1",
        "name": "T° Hi/Lo",
        "func": "msg.tmin1=Math.round(msg.payload.daily.data[0].temperatureMin);\nmsg.tmin2=Math.round(msg.payload.daily.data[1].temperatureMin);\nmsg.tmin3=Math.round(msg.payload.daily.data[2].temperatureMin);\nmsg.tmin4=Math.round(msg.payload.daily.data[3].temperatureMin);\nmsg.tmin5=Math.round(msg.payload.daily.data[4].temperatureMin);\nmsg.tmin6=Math.round(msg.payload.daily.data[5].temperatureMin);\n\nmsg.tmax1=Math.round(msg.payload.daily.data[0].temperatureMax);\nmsg.tmax2=Math.round(msg.payload.daily.data[1].temperatureMax);\nmsg.tmax3=Math.round(msg.payload.daily.data[2].temperatureMax);\nmsg.tmax4=Math.round(msg.payload.daily.data[3].temperatureMax);\nmsg.tmax5=Math.round(msg.payload.daily.data[4].temperatureMax);\nmsg.tmax6=Math.round(msg.payload.daily.data[5].temperatureMax);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 561,
        "y": 217,
        "wires": [
            [
                "ef075b0e.10f8a8"
            ]
        ]
    },
    {
        "id": "ef075b0e.10f8a8",
        "type": "ui_template",
        "z": "d512f3f4.2aed1",
        "group": "f2d280b9.0d2d8",
        "name": "T° Hi/Lo",
        "order": 2,
        "width": "6",
        "height": "1",
        "format": "<div layout=\"row\" layout-align=\"space-between\" style=\"text-align: left; margin:-3px 0 0 4px;\">\n    <div style=\"width:16%;margin-left:6px;\">\n        <div style=\"hi\"><span>&#8679;</span>{{msg.tmax1 + \"°\"}}</div>\n        <div style=\"lo\"><span>&#8681;</span>{{msg.tmin1 + \"°\"}}</div>\n    </div>\n    <div style=\"width:16%;margin-left:6px;\">\n        <div><span>&#8679;</span>{{msg.tmax2 + \"°\"}}</div>\n        <div><span>&#8681;</span>{{msg.tmin2 + \"°\"}}</div>\n    </div>\n    <div style=\"width:16%;margin-left:6px;\">\n        <div><span>&#8679;</span>{{msg.tmax3 + \"°\"}}</div>\n        <div><span>&#8681;</span>{{msg.tmin3 + \"°\"}}</div>\n    </div>\n    <div style=\"width:16%;margin-left:6px;\">\n        <div><span>&#8679;</span>{{msg.tmax4 + \"°\"}}</div>\n        <div><span>&#8681;</span>{{msg.tmin4 + \"°\"}}</div>\n    </div>\n    <div style=\"width:16%;margin-left:6px;\">\n        <div><span>&#8679;</span>{{msg.tmax5 + \"°\"}}</div>\n        <div><span>&#8681;</span>{{msg.tmin5 + \"°\"}}</div>\n    </div>\n    <div style=\"width:16%;margin-left:6px;\">\n        <div><span>&#8679;</span>{{msg.tmax6 + \"°\"}}</div>\n        <div><span>&#8681;</span>{{msg.tmin6 + \"°\"}}</div>\n    </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 741,
        "y": 217,
        "wires": [
            []
        ]
    },
    {
        "id": "8852592c.77ada8",
        "type": "function",
        "z": "d512f3f4.2aed1",
        "name": "Get weather object",
        "func": "try {\nmsg.payload=global.get(\"DarkSky\");\nnode.send(msg);\n}\ncatch(e) {}",
        "outputs": 1,
        "noerr": 0,
        "x": 336.5,
        "y": 157,
        "wires": [
            [
                "4294372e.bd6bc8",
                "fd582da8.02a7d",
                "19a53bcb.e65ac4",
                "7483a045.8b7c6",
                "49c85da8.b637a4",
                "d5fb6f9a.2a049",
                "bde96b67.421698",
                "779fbebc.88604"
            ]
        ]
    },
    {
        "id": "943d71d9.6bc29",
        "type": "inject",
        "z": "d512f3f4.2aed1",
        "name": "Every 15mn",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "900",
        "crontab": "",
        "once": true,
        "x": 109,
        "y": 30,
        "wires": [
            [
                "6a505282.95afac"
            ]
        ]
    },
    {
        "id": "f085fb1d.0f7a08",
        "type": "function",
        "z": "d512f3f4.2aed1",
        "name": "Set DarkSky global var",
        "func": "try {\nvar weathertest=msg.payload.currently;\nglobal.set(\"DarkSky\",msg.payload);\nnode.send (msg);\n}\ncatch(e) {}",
        "outputs": 1,
        "noerr": 0,
        "x": 546,
        "y": 31,
        "wires": [
            [
                "20f0a2d2.df0f5e",
                "8852592c.77ada8"
            ]
        ]
    },
    {
        "id": "6a505282.95afac",
        "type": "http request",
        "z": "d512f3f4.2aed1",
        "name": "Darksky Json Get",
        "method": "GET",
        "ret": "obj",
        "url": "https://api.darksky.net/forecast/16615cc4a72a42a7b2b3b1baef2a00fc/-43.5127946,172.3188943?units=auto",
        "tls": "",
        "x": 311,
        "y": 31,
        "wires": [
            [
                "f085fb1d.0f7a08"
            ]
        ]
    },
    {
        "id": "97950d61.686af",
        "type": "comment",
        "z": "2f93ead9.d06c16",
        "name": "Show my IP",
        "info": "",
        "x": 92,
        "y": 327.5,
        "wires": []
    },
    {
        "id": "20f0a2d2.df0f5e",
        "type": "debug",
        "z": "d512f3f4.2aed1",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 787.5,
        "y": 32,
        "wires": []
    },
    {
        "id": "3dc5f297.c23a0e",
        "type": "debug",
        "z": "414238f1.bebdc8",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 309.5,
        "y": 288,
        "wires": []
    },
    {
        "id": "8dff55a3.7200a8",
        "type": "debug",
        "z": "414238f1.bebdc8",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 352.5,
        "y": 535,
        "wires": []
    },
    {
        "id": "4e320872.b1cdf8",
        "type": "debug",
        "z": "2f93ead9.d06c16",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 534.5,
        "y": 480.5,
        "wires": []
    },
    {
        "id": "69434942.96bcb8",
        "type": "exec",
        "z": "2f93ead9.d06c16",
        "command": "pwd",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 290,
        "y": 460,
        "wires": [
            [
                "841313b6.7becf"
            ],
            [
                "4e320872.b1cdf8"
            ],
            []
        ]
    },
    {
        "id": "841313b6.7becf",
        "type": "debug",
        "z": "2f93ead9.d06c16",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 485,
        "y": 583.5,
        "wires": []
    },
    {
        "id": "112718f4.b8d4c7",
        "type": "switch",
        "z": "a28e7aaa.32de",
        "name": "msg.type",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0x92",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0x88",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0x97",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 4,
        "x": 194,
        "y": 325,
        "wires": [
            [
                "cfdecfc3.03ceb8"
            ],
            [
                "4bf28b62.e3564c"
            ],
            [
                "cac60ac5.bbe058",
                "5c53d08c.6f809"
            ],
            [
                "6aa6d329.1a87d4"
            ]
        ],
        "outputLabels": [
            "Remote ADIO",
            "AT Response",
            "RAT Response",
            ""
        ]
    },
    {
        "id": "cfdecfc3.03ceb8",
        "type": "switch",
        "z": "a28e7aaa.32de",
        "name": "remote16",
        "property": "payload.remote16",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$globalContext(\"Main\")",
                "vt": "jsonata"
            },
            {
                "t": "eq",
                "v": "$globalContext(\"Rain\")",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 3,
        "x": 325,
        "y": 242,
        "wires": [
            [
                "243d3c13.02aef4"
            ],
            [
                "11ddf31d.6ed755"
            ],
            []
        ],
        "outputLabels": [
            "Main",
            "Rain",
            null
        ]
    },
    {
        "id": "243d3c13.02aef4",
        "type": "change",
        "z": "a28e7aaa.32de",
        "name": "Main.AD0",
        "rules": [
            {
                "t": "move",
                "p": "payload.analogSamples.AD0",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 385,
        "y": 199,
        "wires": [
            [
                "c9736846.2fc8e8",
                "103e3a1b.d44a86"
            ]
        ]
    },
    {
        "id": "11ddf31d.6ed755",
        "type": "change",
        "z": "a28e7aaa.32de",
        "name": "Rain.AD0",
        "rules": [
            {
                "t": "move",
                "p": "payload.analogSamples.AD0",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 383.5,
        "y": 287,
        "wires": [
            [
                "cecf344d.f3d68",
                "103e3a1b.d44a86"
            ]
        ]
    },
    {
        "id": "c9736846.2fc8e8",
        "type": "link out",
        "z": "a28e7aaa.32de",
        "name": "Main ADC out",
        "links": [
            "7e8ab1f8.81755"
        ],
        "x": 505,
        "y": 199,
        "wires": []
    },
    {
        "id": "cecf344d.f3d68",
        "type": "link out",
        "z": "a28e7aaa.32de",
        "name": "Rain ADC out",
        "links": [
            "ea27ba5a.15d848"
        ],
        "x": 505,
        "y": 286,
        "wires": []
    },
    {
        "id": "14d9b98.6fc44c7",
        "type": "comment",
        "z": "a28e7aaa.32de",
        "name": "incoming",
        "info": "",
        "x": 92,
        "y": 54,
        "wires": []
    },
    {
        "id": "103e3a1b.d44a86",
        "type": "debug",
        "z": "a28e7aaa.32de",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 576.5,
        "y": 243,
        "wires": []
    },
    {
        "id": "490fecd7.84027c",
        "type": "xbee-rx",
        "z": "a28e7aaa.32de",
        "name": "",
        "xBee": "7b401d11.84bfe4",
        "x": 94,
        "y": 205,
        "wires": [
            [
                "112718f4.b8d4c7"
            ]
        ]
    },
    {
        "id": "4bf28b62.e3564c",
        "type": "debug",
        "z": "a28e7aaa.32de",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 404,
        "y": 345,
        "wires": []
    },
    {
        "id": "271d84a4.d883a4",
        "type": "rpi-gpio out",
        "z": "a28e7aaa.32de",
        "name": "User LED",
        "pin": "38",
        "set": "",
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 356,
        "y": 114,
        "wires": []
    },
    {
        "id": "5be24ac9.d05414",
        "type": "trigger",
        "z": "a28e7aaa.32de",
        "op1": "0",
        "op2": "1",
        "op1type": "str",
        "op2type": "str",
        "duration": "100",
        "extend": false,
        "units": "ms",
        "reset": "",
        "name": "",
        "x": 116,
        "y": 114,
        "wires": [
            [
                "271d84a4.d883a4"
            ]
        ]
    },
    {
        "id": "36f46095.5c11e8",
        "type": "ui_template",
        "z": "424211aa.fab598",
        "group": "41d919af.074e08",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload\"></div>\n\n<div id=\"container\"></div>\n\n<script src=\"sigma.min.js\"></script>\n<script src=\"sigma.parsers.json.min.js\"></script>\n\n<script>\n    (function(scope) {\n        console.log('Position 1');\n        console.dir(scope);\n        scope.$watch('msg.payload', function(data) {\n            console.log('Position 2');\n            console.dir(data);\n        });\n    })(scope);\n    \n    sigma.parsers.json('msg.payload', {\n        container: 'container',\n        settings: {\n        defaultNodeColor: '#ec5148'\n    }   \n  });\n</script>\n</body>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 342,
        "y": 211,
        "wires": [
            []
        ]
    },
    {
        "id": "a344960c.359838",
        "type": "inject",
        "z": "424211aa.fab598",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 60,
        "wires": [
            [
                "17062ff9.443018"
            ]
        ]
    },
    {
        "id": "17062ff9.443018",
        "type": "function",
        "z": "424211aa.fab598",
        "name": "dummy data",
        "func": "var data = \n{\n  \"nodes\": [\n    {\n      \"id\": \"n0\",\n      \"label\": \"A node\",\n      \"x\": 0,\n      \"y\": 0,\n      \"size\": 3\n    },\n    {\n      \"id\": \"n1\",\n      \"label\": \"Another node\",\n      \"x\": 3,\n      \"y\": 1,\n      \"size\": 2\n    },\n    {\n      \"id\": \"n2\",\n      \"label\": \"And a last one\",\n      \"x\": 1,\n      \"y\": 3,\n      \"size\": 1\n    }\n  ],\n  \"edges\": [\n    {\n      \"id\": \"e0\",\n      \"source\": \"n0\",\n      \"target\": \"n1\"\n    },\n    {\n      \"id\": \"e1\",\n      \"source\": \"n1\",\n      \"target\": \"n2\"\n    },\n    {\n      \"id\": \"e2\",\n      \"source\": \"n2\",\n      \"target\": \"n0\"\n    }\n  ]\n}\nreturn data;",
        "outputs": 1,
        "noerr": 0,
        "x": 230,
        "y": 120,
        "wires": [
            [
                "36f46095.5c11e8"
            ]
        ]
    },
    {
        "id": "448378e8.68bd28",
        "type": "inject",
        "z": "c96fed1a.5013d",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 110,
        "y": 260,
        "wires": [
            [
                "d9f9a30f.b65c28"
            ]
        ]
    },
    {
        "id": "d9f9a30f.b65c28",
        "type": "exec",
        "z": "c96fed1a.5013d",
        "command": "sudo journalctl -u nr-live2 -f -n 0 -o cat",
        "addpay": false,
        "append": "",
        "useSpawn": true,
        "timer": "",
        "name": "",
        "x": 330,
        "y": 260,
        "wires": [
            [
                "619c948.a73256c"
            ],
            [
                "619c948.a73256c"
            ],
            []
        ]
    },
    {
        "id": "28112d88.cc16c2",
        "type": "ui_template",
        "z": "c96fed1a.5013d",
        "group": "e4400843.2147f8",
        "name": "NR-Live2",
        "order": 1,
        "width": "",
        "height": "",
        "format": "<div ng-repeat=\"line in msg.payload track by $index\">\n  <div ng-style=\"{'margin-bottom':'1em'}\">{{line}}</div>\n</div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "templateScope": "local",
        "x": 760,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "619c948.a73256c",
        "type": "function",
        "z": "c96fed1a.5013d",
        "name": "Accumulate",
        "func": "// Use a fn context variable to track\n// the output lines\nif ( msg.payload === false ) {\n    // This lets us reset the log list\n    // if we want to, just inject a false payload\n    var lines = [];\n} else {\n    var lines = context.get('jrnlLines')|| [];\n\n    // Add the new output TO THE START\n    // so that the latest output is at the top\n    // of the displayed page\n    \n    // BUT we only want to display ACTUAL\n    // NR log output not all the other stuff\n    // that the journal outputs. Actual NR log\n    // output starts with a date (numeric)\n    if ( isNaN(parseInt(msg.payload.substr(0,1))) ) {\n        // Not numeric at start so not NR output\n        // ignore\n    } else {\n        lines.unshift(msg.payload);\n    }\n    \n    // # lines could get VERY large so cause memory\n    // issues, limit to 200\n    if ( lines.length > 200 ) {\n        // too big so drop the last element\n        lines.pop();\n    }\n}\n\n// save the total output in the context var\ncontext.set('jrnlLines',lines);\n\n// output all the lines to the UI template\nmsg.payload = lines;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 260,
        "wires": [
            [
                "28112d88.cc16c2",
                "63a04ba6.507324"
            ]
        ]
    },
    {
        "id": "63a04ba6.507324",
        "type": "debug",
        "z": "c96fed1a.5013d",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 771,
        "y": 301,
        "wires": []
    },
    {
        "id": "2a91cf7.4a6023",
        "type": "inject",
        "z": "c96fed1a.5013d",
        "name": "",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 431,
        "y": 305,
        "wires": [
            [
                "619c948.a73256c"
            ]
        ]
    },
    {
        "id": "69328c7b.db5204",
        "type": "comment",
        "z": "c96fed1a.5013d",
        "name": "Output Node-Red log to Dashboard (UI)",
        "info": "See http://flows.nodered.org/flow/6dc1a137075ad93cd7c00224681afeda",
        "x": 438,
        "y": 214,
        "wires": []
    },
    {
        "id": "6499eea6.4189f8",
        "type": "debug",
        "z": "948b214b.6b74e",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 594.5,
        "y": 536,
        "wires": []
    },
    {
        "id": "6c7faa15.89dd8c",
        "type": "debug",
        "z": "ce14a002.31eb6",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 602.5,
        "y": 547,
        "wires": []
    },
    {
        "id": "8f15845d.4f63d8",
        "type": "config",
        "z": "a28e7aaa.32de",
        "name": "Xbee Config",
        "properties": [
            {
                "p": "Main",
                "pt": "global",
                "to": "ee7b",
                "tot": "str"
            },
            {
                "p": "Rain",
                "pt": "global",
                "to": "ed9b",
                "tot": "str"
            },
            {
                "p": "Xbees",
                "pt": "global",
                "to": "{\"Main\":{\"nodeID\":\"Main\",\"dest16\":\"ed9b\",\"dest64\":\"0013a20040a9ddf8\"}}",
                "tot": "json"
            },
            {
                "p": "Base",
                "pt": "global",
                "to": "0000",
                "tot": "str"
            }
        ],
        "active": false,
        "x": 350,
        "y": 60,
        "wires": []
    },
    {
        "id": "e59eb030.a1a598",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 180,
        "wires": [
            [
                "5e5b223c.e55714"
            ]
        ]
    },
    {
        "id": "5e5b223c.e55714",
        "type": "function",
        "z": "b883f942.771888",
        "name": "Get AD0",
        "func": "// See Xbee-API docs for API definitions\nmsg.payload = { \n\t// Set type to string containing frame_type\n\ttype: 0x08,//\"AT_COMMAND\",\n  \tcommand: \"D0\",\n  \tdestination64: \"0013A20040C456D3\",\n\tremoteCommandOptions: 0x02, \n  \tcommandParameter: [ ]\n}; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 309,
        "y": 172,
        "wires": [
            [
                "74e3994d.617a7"
            ]
        ]
    },
    {
        "id": "602b6cc4.488d54",
        "type": "function",
        "z": "b883f942.771888",
        "name": "Get Firmware Version",
        "func": "// See Xbee-API docs for API definitions\nmsg.payload = { \n\t// Set type to string containing frame_type\n\ttype: 0x08,//\"AT_COMMAND\",\n  \tcommand: \"VR\",\n  \tdestination64: \"0013A20040C456D3\",\n\t//remoteCommandOptions: 0x02, \n  \tcommandParameter: [ ]\n}; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 344,
        "y": 229,
        "wires": [
            [
                "74e3994d.617a7"
            ]
        ]
    },
    {
        "id": "2476c7e6.6b136",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 279,
        "wires": [
            [
                "a30b3df3.714378"
            ]
        ]
    },
    {
        "id": "a30b3df3.714378",
        "type": "function",
        "z": "b883f942.771888",
        "name": "Get NodeID",
        "func": "// See Xbee-API docs for API definitions\nvar dest16 = global.get(\"destXbee\");\n\nmsg.payload = { \n\t// Set type to string containing frame_type\n\ttype: 0x08,//\"AT_COMMAND\",\n  \tcommand: \"NI\",\n  \tdestination16: dest16,\n\t//remoteCommandOptions: 0x02, \n  \tcommandParameter: [ ]\n}; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 319,
        "y": 281,
        "wires": [
            [
                "74e3994d.617a7"
            ]
        ]
    },
    {
        "id": "60493f1a.684c8",
        "type": "xbee-tx",
        "z": "b883f942.771888",
        "name": "",
        "xBee": "7b401d11.84bfe4",
        "x": 408.5,
        "y": 104,
        "wires": []
    },
    {
        "id": "fb1d48fb.ce6cd",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 128.5,
        "y": 229,
        "wires": [
            [
                "602b6cc4.488d54"
            ]
        ]
    },
    {
        "id": "bab6527.6397eb",
        "type": "debug",
        "z": "b883f942.771888",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 420,
        "y": 53,
        "wires": []
    },
    {
        "id": "931f11c3.e3fb28",
        "type": "rpi-gpio out",
        "z": "b883f942.771888",
        "name": "Xbee RESET",
        "pin": "24",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 110,
        "y": 60,
        "wires": []
    },
    {
        "id": "1e5a62c3.1565fd",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 129,
        "y": 332,
        "wires": [
            [
                "2252f3f.dd9cb0c"
            ]
        ]
    },
    {
        "id": "2252f3f.dd9cb0c",
        "type": "function",
        "z": "b883f942.771888",
        "name": "Node Discovery",
        "func": "// See Xbee-API docs for API definitions\nmsg.payload = { \n\t// Set type to string containing frame_type\n\ttype: 0x8,//\"AT_COMMAND\",\n  \tcommand: \"ND\",\n  \t//destination64: \"0013a20040b7b1fd\",\n\t//remoteCommandOptions: 0x02, \n  \tcommandParameter: [ ]\n}; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 328,
        "y": 333,
        "wires": [
            [
                "74e3994d.617a7"
            ]
        ]
    },
    {
        "id": "cc158ebe.8ed528",
        "type": "function",
        "z": "b883f942.771888",
        "name": "Set DIO4 ON",
        "func": "// See Xbee-API docs for API definitions\nmsg.payload = { \n\t// Set type to string containing frame_type\n\ttype: 0x17,//\"RAT_COMMAND\",\n  \tcommand: \"D4\",\n  \t//destination64: \"0013a20040b7b1fd\",\n\tdestination16: \"ed9b\",\n\t//remoteCommandOptions: 0x04,\n  \tcommandParameter: [ 4 ]\n}; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 321,
        "y": 405,
        "wires": [
            [
                "74e3994d.617a7"
            ]
        ]
    },
    {
        "id": "6b2296bf.9f53f",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 140,
        "y": 406,
        "wires": [
            [
                "cc158ebe.8ed528"
            ]
        ]
    },
    {
        "id": "3dedf7c4.d97be8",
        "type": "function",
        "z": "b883f942.771888",
        "name": "Set DIO4 OFF",
        "func": "// See Xbee-API docs for API definitions\nmsg.payload = { \n\t// Set type to string containing frame_type\n\ttype: 0x17,//\"RAT_COMMAND\",\n  \tcommand: \"D4\",\n  \tdestination64: \"0013a20040b7b1fd\",\n\t//remoteCommandOptions: 0x05,\n  \tcommandParameter: [  0x05 ]\n}; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 329,
        "y": 471,
        "wires": [
            [
                "74e3994d.617a7"
            ]
        ]
    },
    {
        "id": "f39abf2f.9712e",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 133,
        "y": 470,
        "wires": [
            [
                "3dedf7c4.d97be8"
            ]
        ]
    },
    {
        "id": "aad3faea.0cc708",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "",
        "topic": "",
        "payload": "TEST1",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 110,
        "y": 640,
        "wires": [
            [
                "fb2e293a.380fb8"
            ]
        ]
    },
    {
        "id": "3ed55eb8.ace8da",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "",
        "topic": "",
        "payload": "Rain",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 110,
        "y": 720,
        "wires": [
            [
                "fb2e293a.380fb8"
            ]
        ]
    },
    {
        "id": "d88b87a2.44583",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "",
        "topic": "",
        "payload": "Main",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 110,
        "y": 680,
        "wires": [
            [
                "fb2e293a.380fb8"
            ]
        ]
    },
    {
        "id": "fb2e293a.380fb8",
        "type": "function",
        "z": "b883f942.771888",
        "name": "set current xbee",
        "func": "var xbees = global.get(\"XBees\");\nvar nodeID = msg.payload;\n\nvar dest16 = xbees[nodeID].remote16;\nvar dest64 = xbees[nodeID].remote64;\n\nif ( dest16 ) {\n    node.status( { text: nodeID+\":\"+dest16 } );\n}\n\nflow.set(\"destXbee\",nodeID);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "74e3994d.617a7",
        "type": "link out",
        "z": "b883f942.771888",
        "name": "Xbee TX",
        "links": [
            "91c14e21.930748"
        ],
        "x": 586.5,
        "y": 203,
        "wires": []
    },
    {
        "id": "91c14e21.930748",
        "type": "link in",
        "z": "b883f942.771888",
        "name": "Xbee TX",
        "links": [
            "74e3994d.617a7",
            "725da257.dc914c"
        ],
        "x": 253.5,
        "y": 104,
        "wires": [
            [
                "bab6527.6397eb",
                "60493f1a.684c8"
            ]
        ]
    },
    {
        "id": "51fe6770.90d55",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "Get AD0",
        "topic": "",
        "payload": "{\"command\":\"D0\",\"commandParameter\":[]}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 116,
        "y": 821,
        "wires": [
            [
                "8f1f8f55.e4a68"
            ]
        ]
    },
    {
        "id": "8f1f8f55.e4a68",
        "type": "function",
        "z": "b883f942.771888",
        "name": "AT / RAT",
        "func": "var nodeID = flow.get(\"destXbee\");\nvar xbees = global.get(\"XBees\");\n\nvar dest16 = xbees[nodeID].remote16;\nvar dest64 = xbees[nodeID].remote64;\n\nif ( dest16 ) {\n    node.status( {text:dest16+\":\"+dest64} );\n    msg.payload.destination64 = dest64;\n    msg.payload.type = 0x17;//RAT\n}else{\n    msg.payload.type = 0x08;//AT\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 517,
        "y": 891,
        "wires": [
            [
                "725da257.dc914c"
            ]
        ]
    },
    {
        "id": "ff9739f5.226ba8",
        "type": "comment",
        "z": "b883f942.771888",
        "name": "Xbee API notes",
        "info": "# xbee-api [![Build Status](https://travis-ci.org/jankolkmeier/xbee-api.svg?branch=master)](https://travis-ci.org/jankolkmeier/xbee-api)\n\nThe [xbee-api](http://github.com/jankolkmeier/xbee-api/) [Node.js](http://nodejs.org/) module helps you\nparsing and building API frames that are used to communicate with radio modules talking\nthe [802.15.4](http://en.wikipedia.org/wiki/IEEE_802.15.4) and [ZigBee](http://en.wikipedia.org/wiki/ZigBee) (including **ZNet**) protocol stacks.\nThese are most commonly used in Digi's [xbee](http://www.digi.com/xbee) radio modules, hence the name of this node module.\nHowever, other devices with the mentioned protocol stacks are also supported.\nFor details on supported firmwares and devices, see [here](#supported-firmwares-and-devices).\n\n[xbee-api](http://github.com/jankolkmeier/xbee-api/) does *not* take care of the serial connection\nitself, but it is easy to hook it up to modules such as [serialport](https://github.com/voodootikigod/node-serialport/).\n\nNote that higher-level abstraction as currently provided in the now outdated [svd-xbee](https://github.com/jankolkmeier/svd-xbee/) is not part of this module anymore. Consider 101100's promise-based [xbee-promise](https://github.com/101100/xbee-promise) or Reactive Extensions based [xbee-rx](https://github.com/101100/xbee-rx) module! Some work has been done towards more abstract, stream-based modules:  [xbee-stream](https://github.com/jankolkmeier/xbee-stream/) and [xbee-stream-nodes](https://github.com/jankolkmeier/xbee-stream-nodes/) (both just prototypes).\n\n## GETTING STARTED\nInstall the module with: **[npm](https://npmjs.org/) install xbee-api**\n\n```javascript\nvar xbee_api = require('xbee-api');\nvar C = xbee_api.constants;\nvar xbeeAPI = new xbee_api.XBeeAPI();\n\n// Something we might want to send to an XBee...\nvar frame_obj = {\n  type: C.FRAME_TYPE.AT_COMMAND,\n  command: \"NI\",\n  commandParameter: [],\n};\nconsole.log(xbeeAPI.buildFrame(frame_obj));\n// <Buffer 7e 00 04 08 01 4e 49 5f>\n\n\n// Something we might receive from an XBee...\nvar raw_frame = new Buffer([\n\t0x7E, 0x00, 0x13, 0x97, 0x55, 0x00, 0x13, 0xA2, 0x00, 0x40, 0x52, 0x2B,\n\t0xAA, 0x7D, 0x84, 0x53, 0x4C, 0x00, 0x40, 0x52, 0x2B, 0xAA, 0xF0\n]);\n\nconsole.log(xbeeAPI.parseFrame(raw_frame));\n// { type: 151,\n//   id: 85,\n//   remote64: '0013a20040522baa',\n//   remote16: '7d84',\n//   command: 'SL',\n//   commandStatus: 0,\n//   commandData: [ 64, 82, 43, 170 ] }\n```\n\n**See the [Examples](#examples) section for more useful/practical examples!**\n\n## SUPPORTED FIRMWARES AND DEVICES\nThis module supports the [802.15.4](http://en.wikipedia.org/wiki/IEEE_802.15.4) and [ZigBee](http://en.wikipedia.org/wiki/ZigBee) (including **ZNet**) protocol stacks.\n\nFrom the XBee family, Series 1 (802.15.4) and Series 2 (ZNet 2.5 and ZigBee) modules are supported, since they come with firmwares talking either one of these stacks.\n\nThese documents are used as reference: [90000976.pdf (for Series 2)](https://www.digi.com/resources/documentation/digidocs/PDFs/90000976.pdf) and \n[90000982.pdf (for Series 1)](https://www.digi.com/resources/documentation/digidocs/pdfs/90000982.pdf). Some frame types are 802.15.4, ZNet or ZigBee specific. Be sure to use the correct ones for your module (as described in the documents and the list below). Also check out this [utility from Digi](http://docs.digi.com/display/XCTU/Frames+generator+tool).\n\nModules must run in API mode. Both AP=1 (without escaping) and AP=2 (with escaping) modes are supported (set the api_mode parameter accordingly).\n\nSince ZigBee is more robust and offers more features than ZNet (none of which are yet implemented here, though!), you might be interested in upgrading your Series 2 modules from ZNet 2.5 to ZigBee: [upgradingfromznettozb.pdf](ftp://ftp1.digi.com/support/documentation/upgradingfromznettozb.pdf).  \n\n## SUPPORTED FRAME TYPES\nThe following frame types are implemented:\n\n- 0x00: TX (Transmit) Request: 64-bit address (802.15.4)\n- 0x01: TX (Transmit) Request: 16-bit address (802.15.4)\n- 0x08: AT Command (802.15.4, ZNet, ZigBee)\n- 0x09: AT Command Queue Parameter Value (802.15.4, ZNet, ZigBee)\n- 0x17: Remote Command Request (802.15.4, ZNet, ZigBee)\n- 0x21: Create Source Route (ZigBee)\n- 0x80: RX (Receive) Packet: 64-bit Address (802.15.4)\n- 0x81: RX (Receive) Packet: 16-bit Address (802.15.4)\n- 0x82: RX (Receive) Packet: 64-bit Address IO (802.15.4)\n- 0x83: RX (Receive) Packet: 16-bit Address IO (802.15.4)\n- 0x88: AT Command Response (802.15.4, ZNet, ZigBee)\n- 0x89: TX (Transmit) Status (802.15.4)\n- 0x8A: Modem Status (802.15.4, ZNet, ZigBee)\n- 0x97: Remote Command Response (802.15.4, ZNet, ZigBee)\n- 0x10: ZigBee Transmit Request (ZNet, ZigBee)\n- 0x11: Explicit Addressing ZigBee Command Frame (ZNet, ZigBee)\n- 0x8B: ZigBee Transmit Status (ZNet, ZigBee)\n- 0x90: ZigBee Receive Packet (AO=0) (ZNet, ZigBee)\n- 0x91: ZigBee Explicit Rx Indicator (AO=1) (ZNet, ZigBee)\n- 0x92: ZigBee IO Data Sample Rx Indicator (ZNet, ZigBee)\n- 0x94: XBee Sensor Read Indicator (AO=0) (ZNet, ZigBee)\n- 0x95: Node Identification Indicator (AO=0) (ZNet, ZigBee)\n- 0xA1: Route Record Indicator (ZigBee)\n\n### NOT IMPLEMENTED YET\nThese (more esoteric) frame types have not been implemented yet, [Open a new issue](https://github.com/jankolkmeier/xbee-api/issues/new) if you need something in particular: \n\n- 0x24: Register Joining Device (ZigBee)\n- 0xA0: Over-the-Air Firmware Update Status (ZigBee)\n- 0xA2: Device Authenticated Indicator (ZigBee)\n- 0xA3: Many-to-One Route Request Indicator (ZigBee)\n- 0xA4: Register Joining Device Status (ZigBee)\n- 0xA5: Join Notification Status (ZigBee)\n\n### KNOWN ISSUES\nEnabling encryption with series 1 XBees / 802.15.4 devices causes some inexplicable problems - see [Issue #12](https://github.com/jankolkmeier/xbee-api/issues/12).\n\n## DOCUMENTATION\n\n### THE XBeeAPI CLASS\n\nTo get an instance `xbeeAPI` of the `XBeeAPI` class:\n```javascript\nvar xbee_api = require('xbee-api');\nvar xbeeAPI = new xbee_api.XBeeAPI({\n    // default options:\n    api_mode: 1,              // [1, 2]; 1 is default, 2 is with escaping (set ATAP=2)\n    module: \"Any\",            // [\"802.15.4\", \"ZNet\", \"ZigBee\", \"Any\"]; This does nothing, yet!\n    raw_frames: false,        // [true, false]; If set to true, only raw byte frames are\n                              //   emitted (after validation) but not parsed to objects. \n    convert_adc: true,        // [true, false]; If false, do not convert adc value to millivolt.\n    vref_adc: 1200,           // (int); Set the value to convert adc value to millivolt.\n    parser_buffer_size: 512,  // (int); size of the package parser buffer. 512 co\n                              //   when receiving A LOT of packets, you might want to decrease \n                              //   this to a smaller value (but typically not less than 128)\n    builder_buffer_size: 512  // (int); size of the package builder buffer. \n                              //   when sending A LOT of packets, you might want to decrease\n                              //   this to a smaller value (but typically not less than 128)\n});\n```\nIn the following a documentation of all class methods.\n\n#### xbeeAPI.buildFrame(frame)\nReturns an API frame (buffer) created from the passed frame object. See ***Creating frames from objects to write to the XBee*** for details on how these passed objects are specified.\n\n#### xbeeAPI.canParse(buffer)\nReturns whether the library implements a parser for the frame contained in the provided buffer. The buffer only needs to contain up to the frame type segment to determine if it can be parsed, but `parseFrame()` will need a complete frame.\n\n#### xbeeAPI.parseFrame(buffer)\nParses and returns a frame object from the buffer passed. Note that the buffer must be a complete frame, starting with the start byte and ending with the checksum byte. See ***Objects created from received API Frames*** for details on how the retured objects are specified.\n\n#### xbeeAPI.rawParser()\nReturns a parser function with the profile `function(emitter, buffer) {}`. This can be passed to a serial reader such as serialport. Note that XBeeAPI will not use the emitter to emit a parsed frame, but it's own emitter (see Event: 'frame_object').\n\n#### xbeeAPI.parseRaw(buffer)\nParses data in the buffer, assumes it is comming directly from the XBee. If a complete frame is collected, it is emitted as Event: 'frame_object'.\n\n#### Event: 'frame_object'\nIs emitted whenever a complete frame is collected and parsed.\n\n#### xbeeAPI.nextFrameId()\nIncrements the internal `frameId` counter and returns it. Useful for building requests where we want to identify the respective response frame later on.\n\n### CREATING FRAMES FROM OBJECTS TO WRITE TO THE XBEE\nThere are four basic requests we can make to the XBee of which two are essentially the same. We can make (queued) command requests (0x08 and 0x09) and *remote* command request (0x17). These all behave pretty much the same as writing AT commands in AT mode. Lastly, there are transmit requests which can be used to send your own data to other devices (0x10, 0x00, 0x01 - depending on your firmware).\n\nNote that many parameters have default values. For example, `destination16/64` default to their unknown/broadcast values. For non-single-byte parameters, you can choose to pass a string (`\"fffe\"`) or a byte array (`[0xff, 0xfe]`). We'd expect the latter to be slightly faster (but no benchmarks have been made).\n\n#### 0x08: AT Command (802.15.4, ZNet, ZigBee)\n```javascript\n{\n\ttype: 0x08, // xbee_api.constants.FRAME_TYPE.AT_COMMAND\n\tid: 0x52, // optional, nextFrameId() is called per default\n\tcommand: \"NJ\",\n\tcommandParameter: [],\n}\n```\nExecute the AT command set in `command`, optionally set a `comandParameter` value. An empty parameter usually queries the AT parameter value.\n\n#### 0x09: AT Command Queue Parameter Value (802.15.4, ZNet, ZigBee)\n```javascript\n{\n\ttype: 0x09, // xbee_api.constants.FRAME_TYPE.AT_COMMAND_QUEUE_PARAMETER_VALUE\n\tid: 0x01, // optional, nextFrameId() is called per default\n\tcommand: \"BD\",\n\tcommandParameter: [ 0x07 ]\n}\n```\nPretty much the same as AT Command Requests, except that the commands are queued and applied at once when either an `AC` command is queued or a regular AT command request is sent.\n\n#### 0x17: Remote Command Request (802.15.4, ZNet, ZigBee)\n```javascript\n{\n\ttype: 0x17, // xbee_api.constants.FRAME_TYPE.REMOTE_AT_COMMAND_REQUEST\n\tid: 0x01, // optional, nextFrameId() is called per default\n\tdestination64: \"0013a20040401122\",\n\tdestination16: \"fffe\", // optional, \"fffe\" is default\n\tremoteCommandOptions: 0x02, // optional, 0x02 is default\n\tcommand: \"BH\",\n\tcommandParameter: [ 0x01 ] // Can either be string or byte array.\n}\n```\nBehaves just as AT Command Requests, with additional `destination64/16` parameters set to the remote node on which the AT command is to be executed.\n\n#### 0x10: ZigBee Transmit Request (ZNet, ZigBee)\n```javascript\n{\n\ttype: 0x10, // xbee_api.constants.FRAME_TYPE.ZIGBEE_TRANSMIT_REQUEST\n\tid: 0x01, // optional, nextFrameId() is called per default\n\tdestination64: \"0013a200400a0127\",\n\tdestination16: \"fffe\", // optional, \"fffe\" is default\n\tbroadcastRadius: 0x00, // optional, 0x00 is default\n\toptions: 0x00, // optional, 0x00 is default\n\tdata: \"TxData0A\" // Can either be string or byte array.\n}\n```\nTransmit your own `data` to a remote node.\n\n\n#### 0x00: TX (Transmit) Request: 64-bit address (802.15.4)\n```javascript\n{\n\ttype: 0x00, // xbee_api.constants.FRAME_TYPE.TX_REQUEST_64 \n\tid: 0x01, // optional, nextFrameId() is called per default\n\tdestination64: \"0013a200400a0127\",\n\toptions: 0x00, // optional, 0x00 is default\n\tdata: \"TxData0A\" // Can either be string or byte array.\n}\n```\nTransmit your own `data` to a remote node using a 64 bit address. This is for Series 1 / 802.15.4 modules only!\n\n#### 0x01: TX (Transmit) Request: 16-bit address (802.15.4)\n```javascript\n{\n\ttype: 0x01, // xbee_api.constants.FRAME_TYPE.TX_REQUEST_16 \n\tid: 0x01, // optional, nextFrameId() is called per default\n\tdestination16: \"ab00\",\n\toptions: 0x00, // optional, 0x00 is default\n\tdata: \"TxData0A\" // Can either be string or byte array.\n}\n```\nTransmit your own `data` to a remote node using a 16 bit address. This is for Series 1 / 802.15.4 modules only!\n\n#### 0x11: Explicit Addressing ZigBee Command Frame (ZNet, ZigBee)\n```javascript\n{\n    type: 0x11, // xbee_api.constants.FRAME_TYPE.ZIGBEE_TRANSMIT_REQUEST\n    id: 0x01, // optional, nextFrameId() is called per default\n    destination64: \"0013a200400a0127\", // default is broadcast address\n    destination16: \"fffe\", // default is \"fffe\" (unknown/broadcast)\n    sourceEndpoint: 0xA0,\n    destinationEndpoint: 0xA1,\n    clusterId: \"1554\",\n    profileId: \"C105\",\n    broadcastRadius: 0x00, // optional, 0x00 is default\n    options: 0x00, // optional, 0x00 is default\n    data: \"TxData0A\" // Can either be string or byte array.\n}\n```\nAllows ZigBee application layer fields (endpoint and cluster ID) to be specified for a data transmission. Similar to the ZigBee Transmit Request, but also requires ZigBee application layer addressing fields to be specified (endpoints, cluster ID, profile ID). An Explicit Addressing Request API frame causes the module to send data as an RF packet to the specified destination, using the specified source and destination endpoints, cluster ID, and profile ID.\n\n#### 0x21: Create Source Route (ZNet, ZigBee)\n```javascript\n{\n    type: 0x21, // xbee_api.constants.FRAME_TYPE.CREATE_SOURCE_ROUTE\n    destination64: \"deadbeefcafebabe\", // Must be a unicast address\n    destination16: \"adad\", // Must be a unicast address\n\taddresses: [ // List of hops to destination (usually get these from route record indicator frames)\n\t\t'babe', // Hop closes to destination\n\t\t'beef',\n\t\t'cafe'  // Hop closest to source\n\t]\n}\n```\nThis sets a source route for sending a packet using a hard-coded route. See the ZigBee documentation on using source routing.\n\n### OBJECTS CREATED FORM RECEIVED API FRAMES\nObjects created from API frames that the XBee would recieve contain a `type` property that identifies the frame type. If the frame is a response to a query made earlier, the `id` that was used for that request is also included.\n\n#### 0x88: AT Command Response (802.15.4, ZNet, ZigBee)\n```javascript\n{\n\ttype: 0x88, // xbee_api.constants.FRAME_TYPE.AT_COMMAND_RESPONSE \n\tid: 0x01,\n\tcommand: \"BD\",\n\tcommandStatus: 0x00,\n\tcommandData: []\n}\n```\nThis is a response to a AT command request, for example to query or change an AT parameter value on the XBee module. The command was, in this case, setting the `BD` parameter of module. The command status `0` means `OK` (see [Constants](#constants) for more), which means that the baud rate was changed successfully. \n\n#### 0x97: Remote Command Response (802.15.4, ZNet, ZigBee)\n```javascript\n{\n\ttype: 0x97, // xbee_api.constants.FRAME_TYPE.REMOTE_COMMAND_RESPONSE \n\tid: 0x01,\n\tremote64: \"0013a20040522baa\",\n\tremote16: \"7d84\",\n\tcommand: \"SL\",\n\tcommandStatus: 0x00,\n\tcommandData: [ 0x40, 0x52, 0x2b, 0xaa ]\n}\n```\nThis is a response to a *remote* AT command request, for example to query or change an AT parameter value on another device in the network. This seems to be a response from the node with the address `0013a20040522baa`. The requested command was, in this case, `SL`. The command status `0` means `OK`.\n\n\n#### 0x8B: ZigBee Transmit Status (ZNet, ZigBee)\n```javascript\n{\n\ttype: 0x8B, // xbee_api.constants.FRAME_TYPE.ZIGBEE_TRANSMIT_STATUS \n\tid: 0x01,\n\tremote16: \"7d84\",\n\ttransmitRetryCount: 0,\n\tdeliveryStatus: 0,\n\tdiscoveryStatus: 1\n}\n```\nThis status is received after sending out a transmit request to the XBee (i.e. to send some text data to another module). The status contains the 16bit network address `remote16`, the number of transmission retries, information about whether delivery was successful and about any discoveries made.\n\n#### 0x8A: Modem Status (802.15.4, ZNet, ZigBee)\n```javascript\n{\n\ttype: 0x8a, // xbee_api.constants.FRAME_TYPE.MODEM_STATUS \n\tmodemStatus: 0x06\n}\n```\nThese statuses give information about the general operation of the XBee. See the [Constants](#constants) section for more.\n\n#### 0x90: ZigBee Receive Packet (AO=0) (ZNet, ZigBee)\n```javascript\n{\n\ttype: 0x90, // xbee_api.constants.FRAME_TYPE.ZIGBEE_RECEIVE_PACKET \n\tremote64: \"0013a20040522baa\",\n\tremote16: \"7d84\",\n\treceiveOptions: 0x01,\n\tdata: [ 0x52, 0x78, 0x44, 0x61, 0x74, 0x61 ]\n}\n```\nThis frame contains general data (such as text data) received from remote nodes.\n\n#### 0x91: ZigBee Explicit Rx Indicator (AO=1) (ZNet, ZigBee)\n```javascript\n{\n\ttype: 0x90, // xbee_api.constants.FRAME_TYPE.ZIGBEE_EXPLICIT_RX\n\tremote64: \"0013a20040522baa\",\n\tremote16: \"7d84\",\n\tsourceEndpoint: \"e8\",\n\tdestinationEndpoint: \"e8\",\n\tclusterId: \"0011\",\n\tprofileId: \"c105\",\n\treceiveOptions: 0x01,\n\tdata: [ 0x52, 0x78, 0x44, 0x61, 0x74, 0x61 ]\n}\n```\n\n#### 0x92: ZigBee IO Data Sample Rx Indicator (ZNet, ZigBee)\n```javascript\n{\n\ttype: 0x92, // xbee_api.constants.FRAME_TYPE.ZIGBEE_IO_DATA_SAMPLE_RX \n\tremote64: \"0013a20040522baa\",\n\tremote16: \"7d84\",\n\treceiveOptions: 0x01,\n\tnumSamples: 1,\n\tdigitalSamples: {\n\t\t\"DIO2\": 1,\n\t\t\"DIO3\": 0,\n\t\t\"DIO4\": 1\n\t},\n\tanalogSamples: {\n\t\t\"AD1\": 644\n\t}\n}\n```\nAn I/O data sample that contains information about the state of the digital and analog I/O pins that are set to sample data. Here, pins `DIO2` & `DIO4` read `HIGH`, `DIO3` reads `LOW`, and `AD1` samples an analog voltage of `644mV`.\n\n#### 0x94: XBee Sensor Read Indicator (AO=0) (ZNet, ZigBee)\n```javascript\n{\n    type: 0x94, // xbee_api.constants.FRAME_TYPE.XBEE_SENSOR_READ \n    remote64: \"0013a20040522baa\",\n    remote16: \"7d84\",\n    sensors: 0x03,\n    receiveOptions: 0x01,\n    sensorValues: {\n      AD0:   40, // A/D values in mV\n      AD1: 4120,\n      AD2: 4680,\n      AD3: 1640,\n      T: 362,\n      temperature: 22.625,     // in °C, undefined if no temp sens\n      relativeHumidity: 30.71, // in %, undefined if no hum sens\n      trueHumidity: 30.54,     // in %, undefined if not both temp & hum\n      waterPresent: false\n    }\n}\n```\nWhen the module receives a sensor sample (from a Digi 1-wire sensor adapter).\n\n#### 0x95: Node Identification Indicator (AO=0) (ZNet, ZigBee)\n```javascript\n{\n\ttype: 0x95, // xbee_api.constants.FRAME_TYPE.NODE_IDENTIFICATION\n\tsender64: \"0013a20040522baa\"\n\tsender16: \"7d84\"\n\treceiveOptions: 0x02\n\tremote64: \"0013a20040522baa\"\n\tremote16:\"7d84\"\n\tnodeIdentifier: \"MY_ROUTER\",\n\tremoteParent16: \"fffe\",\n\tdeviceType: 0x01,\n\tsourceEvent: 0x01\n}\n```\nModules with the `JN` (Join Notification) parameter enabled will transmit a broadcast Node Identification Indicator packet on power up and when joining. This can also be sent when the D0 button is pressed. Which of these events occurred is set in the `sourceEvent` property. `sender64/16` here is the one from who the packet was received, whereas `remote64/16` is the identified node itself (may be the same).\n\n#### 0x80: RX (Receive) Packet: 64-bit Address (802.15.4)\n```javascript\n{\n\ttype: 0x80, // xbee_api.constants.FRAME_TYPE.RX_PACKET_64 \n\tremote64: \"0013a20040522baa\",\n\trssi: 0x3f\n\treceiveOptions: 0x01,\n\tdata: [ 0x52, 0x78, 0x44, 0x61, 0x74, 0x61 ]\n}\n```\nThis frame contains general data (such as text data) received from remote nodes(64 bit address). This is received only from Series 1 / 802.15.4 hardware.\n\n#### 0x81: RX (Receive) Packet: 16-bit Address (802.15.4)\n```javascript\n{\n\ttype: 0x81, // xbee_api.constants.FRAME_TYPE.RX_PACKET_16 \n\tremote64: \"522b\",\n\trssi: 0x3f\n\treceiveOptions: 0x01,\n\tdata: [ 0x52, 0x78, 0x44, 0x61, 0x74, 0x61 ]\n}\n```\nThis frame contains general data (such as text data) received from remote nodes(16 bit address). This is received only from Series 1 / 802.15.4 hardware.\n\n#### 0x82: RX (Receive) Packet: 64-bit Address IO (802.15.4)\n```javascript\n{\n\ttype: 0x82, // xbee_api.constants.FRAME_TYPE.RX_PACKET_64_IO \n\tremote64: \"0013a20040522baa\",\n\trssi: 0x3f\n\treceiveOptions: 0x01,\n\tdata: [ 0x52, 0x78, 0x44, 0x61, 0x74, 0x61 ]\n}\n```\nThis frame contains I/O data received from remote nodes (64 bit address). This is received only from Series 1 / 802.15.4 hardware.\n\n#### 0x83: RX (Receive) Packet: 16-bit Address IO (802.15.4)\n```javascript\n{\n\ttype: 0x83, // xbee_api.constants.FRAME_TYPE.RX_PACKET_16_IO \n\tremote64: \"522b\",\n\trssi: 0x3f\n\treceiveOptions: 0x01,\n\tdata: [ 0x52, 0x78, 0x44, 0x61, 0x74, 0x61 ]\n}\n```\nThis frame contains I/O data received from remote nodes (16 bit address). This is received only from Series 1 / 802.15.4 hardware.\n\n#### 0x89: TX (Transmit) Status (802.15.4)\n```javascript\n{\n\ttype: 0x89, // xbee_api.constants.FRAME_TYPE.TX_STATUS \n\tid: 0x01,\n\tdeliveryStatus: 0\n}\n```\nWhen a TX Request is completed, the module sends a TX Status message. This message will indicate if the packet was transmitted successfully or if there was a failure (`deliveryStatus`).\n\n### CONSTANTS\nYou don't have to remember the hex-numbers of the frame types, command options, status types, etc. Everything is defined in two-way constants. See the examples below:\n\n```javascript\nvar xbee_api = require('xbee-api');\nvar C = xbee_api.constants;\n\n// Frame types (frame.type):\nC.FRAME_TYPE.ZIGBEE_TRANSMIT_REQUEST; // 0x10\nC.FRAME_TYPE[0x10] // \"ZigBee Transmit Request (0x10)\";\n\n// Command Status (frame.commandStatus)\nC.COMMAND_STATUS.ERROR; // 0x01\nC.COMMAND_STATUS[0x01]; // \"(Error (0x01)\"\n\n// Discovery Status (frame.discoveryStatus)\nC.DISCOVERY_STATUS.ADDRESS_DISCOVERY // 0x01\nC.DISCOVERY_STATUS[0x01] // \"Address Discovery (0x01)\"\n\n// Delivery Status (frame.deliveryStatus)\nC.DELIVERY_STATUS.ADDRESS_NOT_FOUND // 0x24\nC.DELIVERY_STATUS[0x24] // \"Address Not Found (0x24)\"\n\n// Modem Status (frame.modemStatus)\nC.MODEM_STATUS.JOINED_NETWORK // 0x02\nC.MODEM_STATUS[0x02] // \"Joined Network (0x02)\"\n\n// Receive Options (frame.receiveOptions)\nC.RECEIVE_OPTIONS.PACKET_ACKNOWLEDGED // 0x01;\nC.RECEIVE_OPTIONS[0x01] // \"Packet Acknowledged (0x01)\"\n\n// Device Type (frame.deviceType)\nC.DEVICE_TYPE.END_DEVICE // 0x02\nC.DEVICE_TYPE[0x02] // \"End Device (0x02)\"\n```\n\nPlease refer to `lib/constants.js` for a more complete list, and your module's documentation for more explanation.\n\n## EXAMPLES\nTo combine with [serialport](https://github.com/node-serialport/node-serialport/), using the streaming API, we use the builder and parser transform streams. \n```javascript\nvar SerialPort = require('serialport').SerialPort;\nvar xbee_api = require('xbee-api');\nvar C = xbee_api.constants;\n\nvar xbeeAPI = new xbee_api.XBeeAPI({\n  api_mode: 1\n});\n\nvar serialport = new SerialPort(\"COM19\", {\n  baudrate: 57600,\n});\n\nserialport.pipe(xbeeAPI.parser);\nxbeeAPI.builder.pipe(serialport);\n\nserialport.on(\"open\", function() {\n  var frame_obj = { // AT Request to be sent\n    type: C.FRAME_TYPE.AT_COMMAND,\n    command: \"NI\",\n    commandParameter: [],\n  };\n\n  xbeeAPI.builder.write(frame_obj);\n});\n\n// All frames parsed by the XBee will be emitted here\nxbeeAPI.parser.on(\"data\", function(frame) {\n\tconsole.log(\">>\", frame);\n});\n```\n\nTo link a received frame object to a request we earlier sent, we have to set and remember the `frame.id` of our request. Then, when a new frame object is emitted, we could look it up and route the response back.\n\n```javascript\n\nvar frameId = xbeeAPI.nextFrameId();\nvar frame_obj = {\n\ttype: C.FRAME_TYPE.AT_COMMAND,\n\tid: frameId,\n\tcommand: \"NI\",\n\tcommandParameter: []\n};\n\nxbeeAPI.builder.write(frame_obj);\n\n// All frames parsed by the XBee will be emitted here\nxbeeAPI.parser.on(\"data\", function(frame) {\n\tif (frame.id == frameId &&\n\t    frame.type == C.FRAME_TYPE.AT_COMMAND_RESPONSE) {\n\t\t// This frame is definitely the response!\n\t\tconsole.log(\"Node identifier:\",\n\t\t\tString.fromCharCode(frame.commandData));\n\t} else {\n\t\t// This is some other frame\n\t}\n});\n```\n\nSee the [examples folder](https://github.com/jankolkmeier/xbee-api/tree/master/examples) in the repository for more examples.\n\n### Use in Google Chrome\nSee this [example](http://github.com/jankolkmeier/xbee-api/tree/master/examples/chrome-tool) for how to use [xbee-api](https://github.com/jankolkmeier/xbee-api/) in Google Chrome using the [chrome.serial](http://developer.chrome.com/apps/serial.html) API.\n\n## CONTRIBUTE\nFeel free to send a pull request. There are nodeunit test in the `test/` folder (clone; run `npm install`; run `grunt nodeunit`).\n\n## LICENSE\nCopyright (c) 2013 Jan Kolkmeier  \nLicensed under the MIT license.",
        "x": 120,
        "y": 20,
        "wires": []
    },
    {
        "id": "60e1a384.03b464",
        "type": "function",
        "z": "b883f942.771888",
        "name": "AT",
        "func": "msg.payload.type = 0x08;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 540,
        "wires": [
            [
                "74e3994d.617a7"
            ]
        ]
    },
    {
        "id": "579734bf.68cd74",
        "type": "comment",
        "z": "b883f942.771888",
        "name": "Local commands",
        "info": "Send commands to the attached co-ordinator",
        "x": 118.5,
        "y": 141,
        "wires": []
    },
    {
        "id": "62b8f542.08830c",
        "type": "comment",
        "z": "b883f942.771888",
        "name": "Remote commands",
        "info": "Send commands to a remote node",
        "x": 115.5,
        "y": 591,
        "wires": []
    },
    {
        "id": "4e033872.b46038",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "Get AD0",
        "topic": "",
        "payload": "{\"command\":\"D0\",\"commandParameter\":[]}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 120,
        "y": 540,
        "wires": [
            [
                "60e1a384.03b464"
            ]
        ]
    },
    {
        "id": "725da257.dc914c",
        "type": "link out",
        "z": "b883f942.771888",
        "name": "",
        "links": [
            "91c14e21.930748"
        ],
        "x": 668,
        "y": 888,
        "wires": []
    },
    {
        "id": "6aa6d329.1a87d4",
        "type": "debug",
        "z": "a28e7aaa.32de",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 404,
        "y": 424,
        "wires": []
    },
    {
        "id": "d2ee8b0e.edc91",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "Set D4 low (Enable J8)",
        "topic": "",
        "payload": "{\"command\":\"D4\",\"commandParameter\":[4]}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 159,
        "y": 868,
        "wires": [
            [
                "8f1f8f55.e4a68"
            ]
        ]
    },
    {
        "id": "8b3ce5be.7f3bf",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "Set D4 hi (Disable J8)",
        "topic": "",
        "payload": "{\"command\":\"D4\",\"commandParameter\":[5]}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 159,
        "y": 908,
        "wires": [
            [
                "8f1f8f55.e4a68"
            ]
        ]
    },
    {
        "id": "7f287695.3dafc",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "Set D7 low (Enable J9)",
        "topic": "",
        "payload": "{\"command\":\"D7\",\"commandParameter\":[4]}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 970,
        "wires": [
            [
                "8f1f8f55.e4a68"
            ]
        ]
    },
    {
        "id": "20cfa09c.566a",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "Set D7 hi (Disable J9)",
        "topic": "",
        "payload": "{\"command\":\"D7\",\"commandParameter\":[5]}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 1010,
        "wires": [
            [
                "8f1f8f55.e4a68"
            ]
        ]
    },
    {
        "id": "cac60ac5.bbe058",
        "type": "debug",
        "z": "a28e7aaa.32de",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 404,
        "y": 385,
        "wires": []
    },
    {
        "id": "4fe98aa0.ecc0ec",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "Discover Nodes",
        "topic": "",
        "payload": "{\"command\":\"ND\",\"commandParameter\":[]}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 137,
        "y": 780,
        "wires": [
            [
                "8f1f8f55.e4a68"
            ]
        ]
    },
    {
        "id": "ea4b476.bdb9f38",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "",
        "topic": "",
        "payload": "Base",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 337,
        "y": 640,
        "wires": [
            [
                "fb2e293a.380fb8"
            ]
        ]
    },
    {
        "id": "5c53d08c.6f809",
        "type": "switch",
        "z": "a28e7aaa.32de",
        "name": "msg.command",
        "property": "payload.command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ND",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 368.5,
        "y": 463,
        "wires": [
            [
                "2d64295f.331b76"
            ]
        ],
        "outputLabels": [
            "ND"
        ]
    },
    {
        "id": "2d64295f.331b76",
        "type": "function",
        "z": "a28e7aaa.32de",
        "name": "save nodeID",
        "func": "var xbees = global.get(\"XBees\")||{};\nvar nodeIdentification = msg.payload.nodeIdentification;\nvar thisNode = nodeIdentification.nodeIdentifier.trim();\n\nxbees[thisNode] = nodeIdentification;\n\nglobal.set(\"XBees\",xbees );\n\nnode.log(\"Found station: \" + thisNode);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 522.5,
        "y": 507,
        "wires": [
            [
                "22f8600f.a1e8b8"
            ]
        ]
    },
    {
        "id": "22f8600f.a1e8b8",
        "type": "debug",
        "z": "a28e7aaa.32de",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 654.5,
        "y": 558,
        "wires": []
    },
    {
        "id": "89a7ac47.7c74f8",
        "type": "inject",
        "z": "a28e7aaa.32de",
        "name": "",
        "topic": "",
        "payload": "{\"type\":151,\"id\":42,\"remote64\":\"0013a20040b7b1fd\",\"remote16\":\"ee7b\",\"command\":\"ND\",\"commandStatus\":0,\"nodeIdentification\":{\"remote16\":\"ee7b\",\"remote64\":\"0013a20040b7b1fd\",\"nodeIdentifier\":\" Main\",\"remoteParent16\":\"fffe\",\"deviceType\":1,\"sourceEvent\":0,\"digiProfileID\":\"c105\",\"digiManufacturerID\":\"101e\"}}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 141.5,
        "y": 674,
        "wires": [
            [
                "45ab8248.c284fc"
            ]
        ]
    },
    {
        "id": "e8f1987c.3ffa6",
        "type": "debug",
        "z": "a28e7aaa.32de",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 540.5,
        "y": 680,
        "wires": []
    },
    {
        "id": "45ab8248.c284fc",
        "type": "switch",
        "z": "a28e7aaa.32de",
        "name": "",
        "property": "payload.command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ND",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 350.5,
        "y": 676,
        "wires": [
            [
                "e8f1987c.3ffa6"
            ]
        ]
    },
    {
        "id": "79ac4a87.e18c0c",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "Set D6 low (NO)",
        "topic": "",
        "payload": "{\"command\":\"D6\",\"commandParameter\":[4]}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 139,
        "y": 1051,
        "wires": [
            [
                "8f1f8f55.e4a68"
            ]
        ]
    },
    {
        "id": "2005ab11.0338d4",
        "type": "inject",
        "z": "b883f942.771888",
        "name": "Set D6 hi (NC)",
        "topic": "",
        "payload": "{\"command\":\"D6\",\"commandParameter\":[5]}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 129,
        "y": 1091,
        "wires": [
            [
                "8f1f8f55.e4a68"
            ]
        ]
    }
]